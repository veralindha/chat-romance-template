"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _props = require("./props");

var _shared = require("../utils/shared");

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-loading"
};
var _hoisted_2 = {
  key: 0,
  class: "var-loading__circle"
};

var _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/(0, _vue.createElementVNode)("svg", {
  viewBox: "25 25 50 50"
}, [/*#__PURE__*/(0, _vue.createElementVNode)("circle", {
  cx: "50",
  cy: "50",
  r: "20",
  fill: "none"
})], -1
/* HOISTED */
));

var _hoisted_4 = [_hoisted_3];

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [_ctx.$slots.default ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 0,
    class: (0, _vue.normalizeClass)(["var-loading__content", [_ctx.loading ? 'var-loading__content--active' : null]])
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true), _ctx.isShow ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 1,
    class: (0, _vue.normalizeClass)(["var--box var-loading__body", [_ctx.$slots.default ? 'var-loading__inside' : null]])
  }, [_ctx.type === 'circle' ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_2, [(0, _vue.createElementVNode)("span", {
    class: "var-loading__circle-block",
    style: (0, _vue.normalizeStyle)({
      width: _ctx.getRadius * 2 + 'px',
      height: _ctx.getRadius * 2 + 'px',
      color: _ctx.color
    })
  }, _hoisted_4, 4
  /* STYLE */
  )])) : (0, _vue.createCommentVNode)("v-if", true), ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.loadingTypeDict, (nums, key) => {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)(_vue.Fragment, {
      key: key
    }, [_ctx.type === key ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
      key: 0,
      class: (0, _vue.normalizeClass)("var-loading__" + key + " var-loading__" + key + "-" + _ctx.size)
    }, [((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(nums, num => {
      return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
        key: num + key,
        style: (0, _vue.normalizeStyle)({
          backgroundColor: _ctx.color
        }),
        class: (0, _vue.normalizeClass)("var-loading__" + key + "-item var-loading__" + key + "-item-" + _ctx.size)
      }, null, 6
      /* CLASS, STYLE */
      );
    }), 128
    /* KEYED_FRAGMENT */
    ))], 2
    /* CLASS */
    )) : (0, _vue.createCommentVNode)("v-if", true)], 64
    /* STABLE_FRAGMENT */
    );
  }), 128
  /* KEYED_FRAGMENT */
  )), _ctx.$slots.description || _ctx.description ? ((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    key: 1,
    class: (0, _vue.normalizeClass)(["var-loading__description", "var-loading__description--" + _ctx.size]),
    style: (0, _vue.normalizeStyle)({
      color: _ctx.color
    })
  }, [(0, _vue.renderSlot)(_ctx.$slots, "description", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.description), 1
  /* TEXT */
  )])], 6
  /* CLASS, STYLE */
  )) : (0, _vue.createCommentVNode)("v-if", true)], 2
  /* CLASS */
  )) : (0, _vue.createCommentVNode)("v-if", true)]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarLoading',
  props: _props.props,

  setup(props, {
    slots
  }) {
    var loadingTypeDict = {
      wave: 5,
      cube: 4,
      rect: 8,
      disappear: 3
    };
    var sizeDict = {
      mini: 9,
      small: 12,
      normal: 15,
      large: 18
    };
    var getRadius = (0, _vue.computed)(() => {
      return props.radius ? (0, _shared.toNumber)(props.radius) : sizeDict[props.size];
    });
    var isShow = (0, _vue.computed)(() => {
      if (!(slots.default != null && slots.default())) return true;
      return props.loading;
    });
    return {
      loadingTypeDict,
      getRadius,
      isShow
    };
  }

});

exports.default = _default;