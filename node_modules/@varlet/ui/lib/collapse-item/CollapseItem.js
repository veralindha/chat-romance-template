"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _elements = require("../utils/elements");

var _shared = require("../utils/shared");

var _provide = require("./provide");

var _props = require("./props");

var _icon = _interopRequireDefault(require("../icon"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-collapse-item-header__title"
};
var _hoisted_2 = {
  class: "var-collapse-item-header__icon"
};
var _hoisted_3 = {
  class: "var-collapse-item__wrap"
};

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)({
      'var-collapse-item': true,
      'var-collapse-item__active': _ctx.offset && _ctx.isShow,
      'var-collapse-item__disable': _ctx.disabled
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: "var-collapse-item-header",
    onClick: _cache[0] || (_cache[0] = $event => _ctx.toggle())
  }, [(0, _vue.createElementVNode)("div", _hoisted_1, [(0, _vue.renderSlot)(_ctx.$slots, "title", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.title), 1
  /* TEXT */
  )])]), (0, _vue.createElementVNode)("div", _hoisted_2, [(0, _vue.renderSlot)(_ctx.$slots, "icon", {}, () => [(0, _vue.createVNode)(_component_var_icon, {
    name: _ctx.icon,
    transition: 250,
    class: (0, _vue.normalizeClass)({
      'var-collapse-item-header__icon': true,
      'var-collapse-item-header__open': _ctx.isShow && _ctx.icon === 'chevron-down',
      'var-collapse-item-header__disable': _ctx.disabled
    })
  }, null, 8
  /* PROPS */
  , ["name", "class"])])])]), (0, _vue.withDirectives)((0, _vue.createElementVNode)("div", {
    class: "var-collapse-item-content",
    ref: "contentEl",
    onTransitionend: _cache[1] || (_cache[1] = (...args) => _ctx.transitionend && _ctx.transitionend(...args))
  }, [(0, _vue.createElementVNode)("div", _hoisted_3, [(0, _vue.renderSlot)(_ctx.$slots, "default")])], 544
  /* HYDRATE_EVENTS, NEED_PATCH */
  ), [[_vue.vShow, _ctx.show]])], 2
  /* CLASS */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCollapseItem',
  components: {
    VarIcon: _icon.default
  },
  props: _props.props,

  setup(props) {
    var {
      index,
      collapse,
      bindCollapse
    } = (0, _provide.useCollapse)();
    var contentEl = (0, _vue.ref)(null);
    var show = (0, _vue.ref)(false);
    var isShow = (0, _vue.ref)(false);
    var {
      active,
      offset,
      updateItem
    } = collapse;
    var name = (0, _vue.computed)(() => props.name);

    var init = (accordion, show) => {
      if (active.value === undefined || accordion && (0, _shared.isArray)(active.value) || show === isShow.value) return;
      isShow.value = show;
      toggle(true);
    };

    var toggle = initOrAccordion => {
      if (props.disabled) return;

      if (!initOrAccordion) {
        updateItem(props.name || index.value, !isShow.value);
      }
    };

    var openPanel = () => {
      if (!contentEl.value) return;
      contentEl.value.style.height = '';
      show.value = true;
      (0, _vue.nextTick)(() => {
        var {
          offsetHeight
        } = contentEl.value;
        contentEl.value.style.height = 0 + 'px';
        (0, _elements.requestAnimationFrame)(() => {
          ;
          contentEl.value.style.height = offsetHeight + 'px';
        });
      });
    };

    var closePanel = () => {
      if (!contentEl.value) return;
      contentEl.value.style.height = 0 + 'px';
    };

    var transitionend = () => {
      if (!isShow.value) {
        show.value = false;
        contentEl.value.style.height = '';
      }
    };

    var collapseItemProvider = {
      index,
      name,
      init
    };
    bindCollapse(collapseItemProvider);
    (0, _vue.watch)(isShow, value => {
      if (value) openPanel();else closePanel();
    });
    return {
      show,
      isShow,
      offset,
      toggle,
      contentEl,
      transitionend
    };
  }

});

exports.default = _default;