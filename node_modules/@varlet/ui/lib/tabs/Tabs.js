"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _sticky = _interopRequireDefault(require("../sticky"));

var _vue = require("vue");

var _props = require("./props");

var _provide = require("./provide");

var _shared = require("../utils/shared");

var _elements = require("../utils/elements");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createBlock)((0, _vue.resolveDynamicComponent)(_ctx.sticky ? 'var-sticky' : _ctx.Transition), {
    "offset-top": _ctx.sticky ? _ctx.offsetTop : null
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
      class: ["var-tabs var--box", ["var-tabs--item-" + _ctx.itemDirection, "var-tabs--layout-" + _ctx.layoutDirection + "-padding", _ctx.elevation ? "var-elevation--4" : null, _ctx.fixedBottom ? 'var-tabs--fixed-bottom' : null]],
      style: {
        background: _ctx.color
      }
    }, _ctx.$attrs), [(0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(["var-tabs__tab-wrap", [_ctx.scrollable ? "var-tabs--layout-" + _ctx.layoutDirection + "-scrollable" : null, "var-tabs--layout-" + _ctx.layoutDirection]]),
      ref: "scrollerEl"
    }, [(0, _vue.renderSlot)(_ctx.$slots, "default"), (0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(["var-tabs__indicator", ["var-tabs--layout-" + _ctx.layoutDirection + "-indicator"]]),
      style: (0, _vue.normalizeStyle)({
        width: _ctx.layoutDirection === 'horizontal' ? _ctx.indicatorWidth : _ctx.toSizeUnit(_ctx.indicatorSize),
        height: _ctx.layoutDirection === 'horizontal' ? _ctx.toSizeUnit(_ctx.indicatorSize) : _ctx.indicatorHeight,
        transform: _ctx.layoutDirection === 'horizontal' ? "translateX(" + _ctx.indicatorX + ")" : "translateY(" + _ctx.indicatorY + ")",
        background: _ctx.indicatorColor || _ctx.activeColor
      })
    }, null, 6
    /* CLASS, STYLE */
    )], 2
    /* CLASS */
    )], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["offset-top"]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarTabs',
  components: {
    VarSticky: _sticky.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var indicatorWidth = (0, _vue.ref)('0px');
    var indicatorHeight = (0, _vue.ref)('0px');
    var indicatorX = (0, _vue.ref)('0px');
    var indicatorY = (0, _vue.ref)('0px');
    var scrollable = (0, _vue.ref)(false);
    var scrollerEl = (0, _vue.ref)(null);
    var active = (0, _vue.computed)(() => props.active);
    var activeColor = (0, _vue.computed)(() => props.activeColor);
    var inactiveColor = (0, _vue.computed)(() => props.inactiveColor);
    var disabledColor = (0, _vue.computed)(() => props.disabledColor);
    var itemDirection = (0, _vue.computed)(() => props.itemDirection);
    var {
      tabList,
      bindTabList,
      length
    } = (0, _provide.useTabList)();

    var onTabClick = tab => {
      var _tab$name$value, _props$onUpdateActiv;

      var currentActive = (_tab$name$value = tab.name.value) != null ? _tab$name$value : tab.index.value;
      var {
        active,
        onChange,
        onClick
      } = props;
      (_props$onUpdateActiv = props['onUpdate:active']) == null ? void 0 : _props$onUpdateActiv.call(props, currentActive);
      onClick == null ? void 0 : onClick(currentActive);
      currentActive !== active && (onChange == null ? void 0 : onChange(currentActive));
    };

    var matchName = () => {
      return tabList.find(({
        name
      }) => props.active === name.value);
    };

    var matchIndex = () => {
      return tabList.find(({
        index
      }) => props.active === index.value);
    };

    var matchBoundary = () => {
      var _props$onUpdateActiv2, _props$onUpdateActiv3;

      if (length.value === 0) {
        return;
      }

      var {
        active
      } = props;
      (0, _shared.isNumber)(active) ? active > length.value - 1 ? (_props$onUpdateActiv2 = props['onUpdate:active']) == null ? void 0 : _props$onUpdateActiv2.call(props, length.value - 1) : (_props$onUpdateActiv3 = props['onUpdate:active']) == null ? void 0 : _props$onUpdateActiv3.call(props, 0) : null;
      return matchIndex();
    };

    var watchScrollable = () => {
      scrollable.value = tabList.length >= 5;
    };

    var moveIndicator = ({
      element
    }) => {
      var el = element.value;

      if (props.layoutDirection === 'horizontal') {
        indicatorWidth.value = (el == null ? void 0 : el.offsetWidth) + "px";
        indicatorX.value = (el == null ? void 0 : el.offsetLeft) + "px";
      } else {
        indicatorHeight.value = (el == null ? void 0 : el.offsetHeight) + "px";
        indicatorY.value = (el == null ? void 0 : el.offsetTop) + "px";
      }
    };

    var scrollToCenter = ({
      element
    }) => {
      if (!scrollable.value) {
        return;
      }

      var scroller = scrollerEl.value;
      var el = element.value;

      if (props.layoutDirection === 'horizontal') {
        var left = el.offsetLeft + el.offsetWidth / 2 - scroller.offsetWidth / 2;
        (0, _elements.scrollTo)(scroller, {
          left,
          animation: _shared.linear
        });
      } else {
        var top = el.offsetTop + el.offsetHeight / 2 - scroller.offsetHeight / 2;
        (0, _elements.scrollTo)(scroller, {
          top,
          animation: _shared.linear
        });
      }
    }; // expose


    var resize = () => {
      var tab = matchName() || matchIndex() || matchBoundary();

      if (!tab || tab.disabled.value) {
        return;
      }

      watchScrollable();
      moveIndicator(tab);
      scrollToCenter(tab);
    };

    var tabsProvider = {
      active,
      activeColor,
      inactiveColor,
      disabledColor,
      itemDirection,
      resize,
      onTabClick
    };
    bindTabList(tabsProvider);
    (0, _vue.watch)(() => length.value, () => (0, _vue.nextTick)().then(resize));
    (0, _vue.watch)(() => props.active, resize);
    (0, _vue.onMounted)(() => window.addEventListener('resize', resize));
    (0, _vue.onUnmounted)(() => window.removeEventListener('resize', resize));
    return {
      indicatorWidth,
      indicatorHeight,
      indicatorX,
      indicatorY,
      scrollable,
      scrollerEl,
      Transition: _vue.Transition,
      toSizeUnit: _elements.toSizeUnit,
      resize
    };
  }

});

exports.default = _default;