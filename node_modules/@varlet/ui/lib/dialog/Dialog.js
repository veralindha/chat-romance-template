"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _popup = _interopRequireDefault(require("../popup"));

var _button = _interopRequireDefault(require("../button"));

var _props = require("./props");

var _vue = require("vue");

var _shared = require("../utils/shared");

var _locale = require("../locale");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-dialog__title"
};
var _hoisted_2 = {
  class: "var-dialog__actions"
};

function render(_ctx, _cache) {
  var _component_var_button = (0, _vue.resolveComponent)("var-button");

  var _component_var_popup = (0, _vue.resolveComponent)("var-popup");

  return (0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_popup, {
    class: "var-dialog__popup-radius",
    "var-dialog-cover": "",
    show: _ctx.popupShow,
    overlay: _ctx.overlay,
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    "lock-scroll": _ctx.lockScroll,
    "close-on-click-overlay": _ctx.popupCloseOnClickOverlay,
    teleport: _ctx.teleport,
    onOpen: _ctx.onOpen,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onOpened: _ctx.onOpened,
    onRouteChange: _ctx.onRouteChange,
    onClickOverlay: _ctx.handleClickOverlay
  }, {
    default: (0, _vue.withCtx)(() => [(0, _vue.createElementVNode)("div", (0, _vue.mergeProps)({
      class: "var--box var-dialog"
    }, _ctx.$attrs), [(0, _vue.createElementVNode)("div", _hoisted_1, [(0, _vue.renderSlot)(_ctx.$slots, "title", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.dt(_ctx.title, _ctx.pack.dialogTitle)), 1
    /* TEXT */
    )])]), (0, _vue.createElementVNode)("div", {
      class: "var-dialog__message",
      style: (0, _vue.normalizeStyle)({
        textAlign: _ctx.messageAlign
      })
    }, [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.message), 1
    /* TEXT */
    )])], 4
    /* STYLE */
    ), (0, _vue.createElementVNode)("div", _hoisted_2, [_ctx.cancelButton ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_button, {
      key: 0,
      class: "var-dialog__button var-dialog__cancel-button",
      "var-dialog-cover": "",
      text: "",
      "text-color": _ctx.cancelButtonTextColor,
      color: _ctx.cancelButtonColor,
      onClick: _ctx.cancel
    }, {
      default: (0, _vue.withCtx)(() => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.dt(_ctx.cancelButtonText, _ctx.pack.dialogCancelButtonText)), 1
      /* TEXT */
      )]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["text-color", "color", "onClick"])) : (0, _vue.createCommentVNode)("v-if", true), _ctx.confirmButton ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_button, {
      key: 1,
      class: "var-dialog__button var-dialog__confirm-button",
      "var-dialog-cover": "",
      text: "",
      "text-color": _ctx.confirmButtonTextColor,
      color: _ctx.confirmButtonColor,
      onClick: _ctx.confirm
    }, {
      default: (0, _vue.withCtx)(() => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.dt(_ctx.confirmButtonText, _ctx.pack.dialogConfirmButtonText)), 1
      /* TEXT */
      )]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["text-color", "color", "onClick"])) : (0, _vue.createCommentVNode)("v-if", true)])], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["show", "overlay", "overlay-class", "overlay-style", "lock-scroll", "close-on-click-overlay", "teleport", "onOpen", "onClose", "onClosed", "onOpened", "onRouteChange", "onClickOverlay"]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarDialog',
  components: {
    VarPopup: _popup.default,
    VarButton: _button.default
  },
  inheritAttrs: false,
  props: _props.props,

  setup(props) {
    var popupShow = (0, _vue.ref)(false);
    var popupCloseOnClickOverlay = (0, _vue.ref)(false);

    var done = () => {
      var _props$onUpdateShow;

      return (_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false);
    };

    var handleClickOverlay = () => {
      var _props$onUpdateShow2;

      var {
        closeOnClickOverlay,
        onClickOverlay,
        onBeforeClose
      } = props;
      onClickOverlay == null ? void 0 : onClickOverlay();

      if (!closeOnClickOverlay) {
        return;
      }

      if (onBeforeClose != null) {
        onBeforeClose('close', done);
        return;
      }

      (_props$onUpdateShow2 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow2.call(props, false);
    };

    var confirm = () => {
      var _props$onUpdateShow3;

      var {
        onBeforeClose,
        onConfirm
      } = props;
      onConfirm == null ? void 0 : onConfirm();

      if (onBeforeClose != null) {
        onBeforeClose('confirm', done);
        return;
      }

      (_props$onUpdateShow3 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow3.call(props, false);
    };

    var cancel = () => {
      var _props$onUpdateShow4;

      var {
        onBeforeClose,
        onCancel
      } = props;
      onCancel == null ? void 0 : onCancel();

      if (onBeforeClose != null) {
        onBeforeClose('cancel', done);
        return;
      }

      (_props$onUpdateShow4 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow4.call(props, false);
    };

    (0, _vue.watch)(() => props.show, newValue => {
      popupShow.value = newValue;
    }, {
      immediate: true
    });
    (0, _vue.watch)(() => props.closeOnClickOverlay, newValue => {
      if (props.onBeforeClose != null) {
        popupCloseOnClickOverlay.value = false;
        return;
      }

      popupCloseOnClickOverlay.value = newValue;
    }, {
      immediate: true
    });
    return {
      pack: _locale.pack,
      dt: _shared.dt,
      popupShow,
      popupCloseOnClickOverlay,
      handleClickOverlay,
      confirm,
      cancel
    };
  }

});

exports.default = _default;