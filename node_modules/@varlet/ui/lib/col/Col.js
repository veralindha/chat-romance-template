"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _shared = require("../utils/shared");

var _props = require("./props");

var _provide = require("./provide");

var _elements = require("../utils/elements");

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: (0, _vue.normalizeClass)(["var-col var--box", [_ctx.span ? "var-col--span-" + _ctx.toNumber(_ctx.span) : null, _ctx.offset ? "var-col--offset-" + _ctx.toNumber(_ctx.offset) : null]]),
    style: (0, _vue.normalizeStyle)({
      paddingLeft: _ctx.toSizeUnit(_ctx.padding.left),
      paddingRight: _ctx.toSizeUnit(_ctx.padding.right)
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 6
  /* CLASS, STYLE */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCol',
  props: _props.props,

  setup(props) {
    var padding = (0, _vue.ref)({
      left: 0,
      right: 0
    });
    var span = (0, _vue.computed)(() => (0, _shared.toNumber)(props.span));
    var offset = (0, _vue.computed)(() => (0, _shared.toNumber)(props.offset));
    var {
      row,
      bindRow
    } = (0, _provide.useRow)();
    var colProvider = {
      span,
      offset,

      setPadding(pad) {
        padding.value = pad;
      }

    };
    (0, _vue.watch)([() => props.span, () => props.offset], () => {
      row == null ? void 0 : row.computePadding();
    });
    bindRow == null ? void 0 : bindRow(colProvider);
    return {
      padding,
      toNumber: _shared.toNumber,
      toSizeUnit: _elements.toSizeUnit
    };
  }

});

exports.default = _default;