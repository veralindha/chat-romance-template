"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _icon = _interopRequireDefault(require("../icon"));

var _vue = require("vue");

var _elements = require("../utils/elements");

var _props = require("./props");

var _shared = require("../utils/shared");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var MAX_DISTANCE = 100;
var CONTROL_POSITION = -50;
var scroller;

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    ref: "freshNode",
    class: "var-pull-refresh",
    onTouchstart: _cache[0] || (_cache[0] = (...args) => _ctx.touchStart && _ctx.touchStart(...args)),
    onTouchmove: _cache[1] || (_cache[1] = (...args) => _ctx.touchMove && _ctx.touchMove(...args)),
    onTouchend: _cache[2] || (_cache[2] = (...args) => _ctx.touchEnd && _ctx.touchEnd(...args)),
    onTouchcancel: _cache[3] || (_cache[3] = (...args) => _ctx.touchEnd && _ctx.touchEnd(...args))
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(["var-pull-refresh__control var-elevation--2", [_ctx.isSuccess ? 'var-pull-refresh__control-success' : null]]),
    style: (0, _vue.normalizeStyle)(_ctx.controlStyle)
  }, [(0, _vue.createVNode)(_component_var_icon, {
    name: _ctx.iconName,
    transition: 200,
    class: (0, _vue.normalizeClass)(_ctx.iconClass),
    "var-pull-refresh-cover": ""
  }, null, 8
  /* PROPS */
  , ["name", "class"])], 6
  /* CLASS, STYLE */
  ), (0, _vue.renderSlot)(_ctx.$slots, "default")], 544
  /* HYDRATE_EVENTS, NEED_PATCH */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarPullRefresh',
  components: {
    VarIcon: _icon.default
  },
  props: _props.props,

  setup(props) {
    var freshNode = (0, _vue.ref)(null);
    var startPosition = (0, _vue.ref)(0);
    var distance = (0, _vue.ref)(CONTROL_POSITION);
    var iconName = (0, _vue.ref)('arrow-down');
    var refreshStatus = (0, _vue.ref)('default');
    var isEnd = (0, _vue.ref)(false);
    var isTouchable = (0, _vue.computed)(() => refreshStatus.value !== 'loading' && refreshStatus.value !== 'success' && !props.disabled);
    var iconClass = (0, _vue.computed)(() => ({
      'var-pull-refresh__icon': true,
      'var-pull-refresh__animation': refreshStatus.value === 'loading'
    }));
    var controlStyle = (0, _vue.computed)(() => ({
      transform: "translate3d(0px, " + distance.value + "px, 0px) translate(-50%, 0)",
      transition: isEnd.value ? "transform " + props.animationDuration + "ms" : undefined,
      background: props.successBgColor || props.bgColor,
      color: props.successColor || props.color
    }));
    var isSuccess = (0, _vue.computed)(() => refreshStatus.value === 'success');

    var touchStart = event => {
      if (!isTouchable.value) return;
      refreshStatus.value = 'pulling';
      startPosition.value = event.touches[0].clientY;
    };

    var touchMove = event => {
      var scrollTop = (0, _elements.getScrollTop)(scroller);
      if (scrollTop > 0 || !isTouchable.value) return;
      if (scrollTop === 0 && distance.value > CONTROL_POSITION) event.cancelable && event.preventDefault();
      var moveDistance = (event.touches[0].clientY - startPosition.value) / 2 + CONTROL_POSITION;
      distance.value = moveDistance >= MAX_DISTANCE ? MAX_DISTANCE : moveDistance;
      iconName.value = distance.value >= MAX_DISTANCE * 0.2 ? 'refresh' : 'arrow-down';
    };

    var touchEnd = () => {
      if (!isTouchable.value) return;
      isEnd.value = true;

      if (distance.value >= MAX_DISTANCE * 0.2) {
        var _props$onUpdateModel;

        refreshStatus.value = 'loading';
        distance.value = MAX_DISTANCE * 0.3;
        (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, true);
        props.onRefresh == null ? void 0 : props.onRefresh();
      } else {
        refreshStatus.value = 'loosing';
        iconName.value = 'arrow-down';
        distance.value = CONTROL_POSITION;
        setTimeout(() => {
          isEnd.value = false;
        }, (0, _shared.toNumber)(props.animationDuration));
      }
    };

    var reset = () => {
      setTimeout(() => {
        refreshStatus.value = 'default';
        iconName.value = 'arrow-down';
        isEnd.value = false;
      }, (0, _shared.toNumber)(props.animationDuration));
    };

    (0, _vue.watch)(() => props.modelValue, newValue => {
      if (newValue === false) {
        isEnd.value = true;
        refreshStatus.value = 'success';
        iconName.value = 'checkbox-marked-circle';
        setTimeout(() => {
          distance.value = CONTROL_POSITION;
          reset();
        }, (0, _shared.toNumber)(props.successDuration));
      }
    });
    (0, _vue.onMounted)(() => {
      scroller = (0, _elements.getParentScroller)(freshNode.value);
    });
    return {
      freshNode,
      touchStart,
      touchMove,
      touchEnd,
      iconName,
      iconClass,
      controlStyle,
      isSuccess
    };
  }

});

exports.default = _default;