"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _props = require("./props");

var _provide = require("./provide");

var _elements = require("../utils/elements");

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: "var-row var--box",
    style: (0, _vue.normalizeStyle)({
      justifyContent: _ctx.justify,
      alignItems: _ctx.align
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default")], 4
  /* STYLE */
  );
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarRow',
  props: _props.props,

  setup(props) {
    var {
      cols,
      bindCols,
      length
    } = (0, _provide.useCols)();

    var computeGroups = () => {
      var groups = [[]];
      var span = 0;
      cols.forEach(col => {
        var colSpan = col.span.value + col.offset.value;
        var nextSpan = span + colSpan;

        if (nextSpan > 24) {
          groups.push([col]);
          span = colSpan;
        } else {
          groups[groups.length - 1].push(col);
          span += colSpan;
        }
      });
      return groups;
    };

    var computePadding = () => {
      var groups = computeGroups();
      var gutter = (0, _elements.toPxNum)(props.gutter);
      var average = gutter / 2;
      groups.forEach(cols => {
        cols.forEach((col, index) => {
          if (cols.length <= 1) {
            return;
          }

          if (index === 0) {
            col.setPadding({
              left: 0,
              right: average
            });
          }

          if (index === cols.length - 1) {
            col.setPadding({
              left: average,
              right: 0
            });
          }

          if (index > 0 && index < cols.length - 1) {
            col.setPadding({
              left: average,
              right: average
            });
          }
        });
      });
    };

    var rowProvider = {
      computePadding
    };
    (0, _vue.watch)(() => length.value, computePadding);
    (0, _vue.watch)(() => props.gutter, computePadding);
    bindCols(rowProvider);
  }

});

exports.default = _default;