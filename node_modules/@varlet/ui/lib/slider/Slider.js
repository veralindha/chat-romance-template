"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _components = require("../utils/components");

var _provide = require("../form/provide");

var _elements = require("../utils/elements");

var _shared = require("../utils/shared");

var _props = require("./props");

var _formDetails = _interopRequireDefault(require("../form-details"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var Thumbs;

(function (Thumbs) {
  Thumbs["First"] = "1";
  Thumbs["Second"] = "2";
})(Thumbs || (Thumbs = {}));

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-slider"
};
var _hoisted_2 = {
  class: "var-slider__track"
};
var _hoisted_3 = ["onTouchstart", "onTouchmove", "onTouchend", "onTouchcancel"];

function render(_ctx, _cache) {
  var _component_var_form_details = (0, _vue.resolveComponent)("var-form-details");

  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(["var-slider-block", [_ctx.isDisabled ? 'var-slider__disable' : null, _ctx.errorMessage ? 'var-slider__error' : null]]),
    style: (0, _vue.normalizeStyle)({
      height: _ctx.thumbSize === undefined ? _ctx.thumbSize : 3 * _ctx.toNumber(_ctx.thumbSize) + "px",
      margin: _ctx.thumbSize === undefined ? _ctx.thumbSize : "0 " + _ctx.toNumber(_ctx.thumbSize) / 2 + "px"
    }),
    ref: "sliderEl",
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.click && _ctx.click(...args))
  }, [(0, _vue.createElementVNode)("div", _hoisted_2, [(0, _vue.createElementVNode)("div", {
    class: "var-slider__track-background",
    style: (0, _vue.normalizeStyle)({
      background: _ctx.trackColor,
      height: _ctx.trackHeight + 'px'
    })
  }, null, 4
  /* STYLE */
  ), (0, _vue.createElementVNode)("div", {
    class: "var-slider__track-fill",
    style: (0, _vue.normalizeStyle)(_ctx.getFillStyle)
  }, null, 4
  /* STYLE */
  )]), ((0, _vue.openBlock)(true), (0, _vue.createElementBlock)(_vue.Fragment, null, (0, _vue.renderList)(_ctx.thumbList, item => {
    return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
      class: "var-slider__thumb",
      key: item.enumValue,
      style: (0, _vue.normalizeStyle)({
        left: item.value + "%",
        zIndex: _ctx.thumbsProps[item.enumValue].active ? 1 : undefined
      }),
      onTouchstart: $event => _ctx.start($event, item.enumValue),
      onTouchmove: $event => _ctx.move($event, item.enumValue),
      onTouchend: $event => _ctx.end(item.enumValue),
      onTouchcancel: $event => _ctx.end(item.enumValue)
    }, [(0, _vue.renderSlot)(_ctx.$slots, "button", {
      currentValue: item.value
    }, () => [(0, _vue.createElementVNode)("div", {
      class: "var-slider__thumb-block",
      style: (0, _vue.normalizeStyle)({
        background: _ctx.thumbColor,
        height: _ctx.thumbSize + 'px',
        width: _ctx.thumbSize + 'px'
      })
    }, null, 4
    /* STYLE */
    ), (0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(["var-slider__thumb-ripple", [_ctx.thumbsProps[item.enumValue].active ? 'var-slider__thumb-ripple-active' : null]]),
      style: (0, _vue.normalizeStyle)({
        background: _ctx.thumbColor,
        height: _ctx.thumbSize === undefined ? undefined : _ctx.thumbsProps[item.enumValue].active ? 3 * _ctx.toNumber(_ctx.thumbSize) + "px" : '0px',
        width: _ctx.thumbSize === undefined ? undefined : _ctx.thumbsProps[item.enumValue].active ? 3 * _ctx.toNumber(_ctx.thumbSize) + "px" : '0px'
      })
    }, null, 6
    /* CLASS, STYLE */
    ), (0, _vue.createElementVNode)("div", {
      class: (0, _vue.normalizeClass)(["var-slider__thumb-label", [_ctx.showLabel(item.enumValue) ? 'var-slider__thumb-label-active' : null]]),
      style: (0, _vue.normalizeStyle)({
        background: _ctx.labelColor,
        color: _ctx.labelTextColor,
        height: _ctx.thumbSize === undefined ? _ctx.thumbSize : 2 * _ctx.toNumber(_ctx.thumbSize) + "px",
        width: _ctx.thumbSize === undefined ? _ctx.thumbSize : 2 * _ctx.toNumber(_ctx.thumbSize) + "px"
      })
    }, [(0, _vue.createElementVNode)("span", null, (0, _vue.toDisplayString)(item.value), 1
    /* TEXT */
    )], 6
    /* CLASS, STYLE */
    )])], 44
    /* STYLE, PROPS, HYDRATE_EVENTS */
    , _hoisted_3);
  }), 128
  /* KEYED_FRAGMENT */
  ))], 6
  /* CLASS, STYLE */
  ), (0, _vue.createVNode)(_component_var_form_details, {
    "error-message": _ctx.errorMessage,
    class: "var-slider__form",
    "var-slider-cover": ""
  }, null, 8
  /* PROPS */
  , ["error-message"])]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarSlider',
  components: {
    VarFormDetails: _formDetails.default
  },
  props: _props.props,

  setup(props) {
    var {
      bindForm,
      form
    } = (0, _provide.useForm)();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      resetValidation
    } = (0, _components.useValidation)();

    var validate = () => v(props.rules, props.modelValue);

    var getThumbProps = () => ({
      startPosition: 0,
      currentLeft: 0,
      active: false,
      percentValue: 0
    });

    var validateWithTrigger = () => (0, _vue.nextTick)(() => vt(['onChange'], 'onChange', props.rules, props.modelValue));

    var sliderEl = (0, _vue.ref)(null);
    var maxWidth = (0, _vue.ref)(0);
    var isScroll = (0, _vue.ref)(false);
    var thumbsProps = (0, _vue.reactive)({
      [Thumbs.First]: getThumbProps(),
      [Thumbs.Second]: getThumbProps()
    });
    var unitWidth = (0, _vue.computed)(() => maxWidth.value / 100 * (0, _shared.toNumber)(props.step));
    var thumbList = (0, _vue.computed)(() => {
      var list = [{
        value: props.modelValue,
        enumValue: Thumbs.First
      }];

      if (props.range && (0, _shared.isArray)(props.modelValue)) {
        list = [{
          value: props.modelValue[0],
          enumValue: Thumbs.First
        }, {
          value: props.modelValue[1],
          enumValue: Thumbs.Second
        }];
      }

      return list;
    });

    var showLabel = type => {
      if (props.labelVisible === 'always') return true;
      if (props.labelVisible === 'never') return false;
      return thumbsProps[type].active;
    };

    var getFillStyle = (0, _vue.computed)(() => {
      var {
        activeColor,
        range,
        modelValue
      } = props;
      var width = range && (0, _shared.isArray)(modelValue) ? Math.abs(modelValue[0] - modelValue[1]) : modelValue;
      var left = range && (0, _shared.isArray)(modelValue) ? Math.min(modelValue[0], modelValue[1]) : 0;
      return {
        width: width + "%",
        left: left + "%",
        background: activeColor
      };
    });
    var isDisabled = (0, _vue.computed)(() => props.disabled || (form == null ? void 0 : form.disabled.value));
    var isReadonly = (0, _vue.computed)(() => props.readonly || (form == null ? void 0 : form.readonly.value));

    var setPercent = (moveDistance, type) => {
      var rangeValue = [];
      var {
        step,
        range,
        modelValue,
        onChange
      } = props;
      var stepNumber = (0, _shared.toNumber)(step);
      var roundDistance = Math.round(moveDistance / unitWidth.value);
      var curValue = roundDistance * stepNumber;
      var prevValue = thumbsProps[type].percentValue;
      thumbsProps[type].percentValue = curValue / stepNumber;

      if (range && (0, _shared.isArray)(modelValue)) {
        rangeValue = type === Thumbs.First ? [curValue, modelValue[1]] : [modelValue[0], curValue];
      }

      if (prevValue !== curValue) {
        var _props$onUpdateModel;

        var value = range ? rangeValue : curValue;
        onChange == null ? void 0 : onChange(value);
        (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, value);
        validateWithTrigger();
      }
    };

    var getType = offset => {
      if (!props.range) return Thumbs.First;
      var thumb1Distance = thumbsProps[Thumbs.First].percentValue * unitWidth.value;
      var thumb2Distance = thumbsProps[Thumbs.Second].percentValue * unitWidth.value;
      var offsetToThumb1 = Math.abs(offset - thumb1Distance);
      var offsetToThumb2 = Math.abs(offset - thumb2Distance);
      return offsetToThumb1 <= offsetToThumb2 ? Thumbs.First : Thumbs.Second;
    };

    var start = (event, type) => {
      if (!maxWidth.value) maxWidth.value = sliderEl.value.offsetWidth;
      if (isDisabled.value || isReadonly.value) return;
      props.onStart == null ? void 0 : props.onStart();
      isScroll.value = true;
      thumbsProps[type].startPosition = event.touches[0].clientX;
    };

    var move = (event, type) => {
      if (isDisabled.value || isReadonly.value || !isScroll.value) return;
      var moveDistance = event.touches[0].clientX - thumbsProps[type].startPosition + thumbsProps[type].currentLeft;
      thumbsProps[type].active = true;
      if (moveDistance <= 0) moveDistance = 0;else if (moveDistance >= maxWidth.value) moveDistance = maxWidth.value;
      setPercent(moveDistance, type);
    };

    var end = type => {
      var {
        range,
        modelValue,
        onEnd
      } = props;
      if (isDisabled.value || isReadonly.value) return;
      var rangeValue = [];
      thumbsProps[type].currentLeft = thumbsProps[type].percentValue * unitWidth.value;
      thumbsProps[type].active = false;
      var curValue = thumbsProps[type].percentValue;

      if (range && (0, _shared.isArray)(modelValue)) {
        rangeValue = type === Thumbs.First ? [curValue, modelValue[1]] : [modelValue[0], curValue];
      }

      onEnd == null ? void 0 : onEnd(range ? rangeValue : curValue);
      isScroll.value = false;
    };

    var click = event => {
      if (isDisabled.value || isReadonly.value) return;
      if (event.target.closest('.var-slider__thumb')) return;
      var offset = event.clientX - (0, _elements.getLeft)(event.currentTarget);
      var type = getType(offset);
      setPercent(offset, type);
      end(type);
    };

    var stepValidator = () => {
      var stepNumber = (0, _shared.toNumber)(props.step);

      if (isNaN(stepNumber)) {
        console.warn('[Varlet] Slider: type of prop "step" should be Number');
        return false;
      }

      if (stepNumber < 1 || stepNumber > 100) {
        console.warn('[Varlet] Slider: "step" should be >= 0 and <= 100');
        return false;
      }

      if (parseInt("" + props.step, 10) !== stepNumber) {
        console.warn('[Varlet] Slider: "step" should be an Integer');
        return false;
      }

      return true;
    };

    var valueValidator = () => {
      var {
        range,
        modelValue
      } = props;

      if (range && !(0, _shared.isArray)(modelValue)) {
        console.error('[Varlet] Slider: "modelValue" should be an Array');
        return false;
      }

      if (!range && (0, _shared.isArray)(modelValue)) {
        console.error('[Varlet] Slider: "modelValue" should be a Number');
        return false;
      }

      if (range && (0, _shared.isArray)(modelValue) && modelValue.length < 2) {
        console.error('[Varlet] Slider: "modelValue" should have two value');
        return false;
      }

      return true;
    };

    var setProps = (modelValue = props.modelValue, step = (0, _shared.toNumber)(props.step)) => {
      if (props.range && (0, _shared.isArray)(modelValue)) {
        thumbsProps[Thumbs.First].percentValue = modelValue[0] / step;
        thumbsProps[Thumbs.First].currentLeft = thumbsProps[Thumbs.First].percentValue * unitWidth.value;
        thumbsProps[Thumbs.Second].percentValue = modelValue[1] / step;
        thumbsProps[Thumbs.Second].currentLeft = thumbsProps[Thumbs.Second].percentValue * unitWidth.value;
      } else if ((0, _shared.isNumber)(modelValue)) {
        thumbsProps[Thumbs.First].currentLeft = modelValue / step * unitWidth.value;
      }
    };

    (0, _vue.watch)([() => props.modelValue, () => props.step], ([modelValue, step]) => {
      if (!stepValidator() || !valueValidator() || isScroll.value) return;
      setProps(modelValue, (0, _shared.toNumber)(step));
    });
    (0, _vue.watch)(maxWidth, () => setProps());
    (0, _vue.onMounted)(() => {
      if (!stepValidator() || !valueValidator()) return;
      maxWidth.value = sliderEl.value.offsetWidth;
    });

    var reset = () => {
      var _props$onUpdateModel2;

      var resetValue = props.range ? [0, 0] : 0;
      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, resetValue);
      resetValidation();
    };

    var sliderProvider = {
      reset,
      validate,
      resetValidation
    };
    bindForm == null ? void 0 : bindForm(sliderProvider);
    return {
      Thumbs,
      sliderEl,
      getFillStyle,
      isDisabled,
      errorMessage,
      thumbsProps,
      thumbList,
      toNumber: _shared.toNumber,
      showLabel,
      start,
      move,
      end,
      click
    };
  }

});

exports.default = _default;