"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _loading = _interopRequireDefault(require("../loading"));

var _icon = _interopRequireDefault(require("../icon"));

var _zIndex = require("../context/zIndex");

var _props = require("./props");

var _lock = require("../context/lock");

var _index = require("./index");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ICON_TYPE_DICT = {
  success: 'checkbox-marked-circle',
  warning: 'warning',
  info: 'information',
  error: 'error',
  loading: ''
};

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-snackbar__action"
};

function render(_ctx, _cache) {
  var _component_var_icon = (0, _vue.resolveComponent)("var-icon");

  var _component_var_loading = (0, _vue.resolveComponent)("var-loading");

  return (0, _vue.withDirectives)(((0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", {
    class: "var-snackbar",
    style: (0, _vue.normalizeStyle)({
      pointerEvents: _ctx.isForbidClick ? 'auto' : 'none',
      zIndex: _ctx.zIndex
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(_ctx.snackbarClass),
    style: (0, _vue.normalizeStyle)({
      zIndex: _ctx.zIndex
    })
  }, [(0, _vue.createElementVNode)("div", {
    class: (0, _vue.normalizeClass)(["var-snackbar__content", [_ctx.contentClass]])
  }, [(0, _vue.renderSlot)(_ctx.$slots, "default", {}, () => [(0, _vue.createTextVNode)((0, _vue.toDisplayString)(_ctx.content), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  ), (0, _vue.createElementVNode)("div", _hoisted_1, [_ctx.iconName ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_icon, {
    key: 0,
    name: _ctx.iconName
  }, null, 8
  /* PROPS */
  , ["name"])) : (0, _vue.createCommentVNode)("v-if", true), _ctx.type === 'loading' ? ((0, _vue.openBlock)(), (0, _vue.createBlock)(_component_var_loading, {
    key: 1,
    type: _ctx.loadingType,
    size: _ctx.loadingSize
  }, null, 8
  /* PROPS */
  , ["type", "size"])) : (0, _vue.createCommentVNode)("v-if", true), (0, _vue.renderSlot)(_ctx.$slots, "action")])], 6
  /* CLASS, STYLE */
  )], 4
  /* STYLE */
  )), [[_vue.vShow, _ctx.show]]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarSnackbarCore',
  components: {
    VarLoading: _loading.default,
    VarIcon: _icon.default
  },
  props: _props.props,

  setup(props) {
    var timer = (0, _vue.ref)(null);
    var {
      zIndex
    } = (0, _zIndex.useZIndex)(() => props.show, 1);
    (0, _lock.useLock)(props, 'show', 'lockScroll');
    var snackbarClass = (0, _vue.computed)(() => {
      var {
        position,
        vertical,
        type
      } = props;
      var baseClass = "var-snackbar__wrapper var-snackbar__wrapper-" + position + " var-elevation--4";
      var verticalClass = vertical ? ' var-snackbar__vertical' : '';
      var typeClass = type && _index.SNACKBAR_TYPE.includes(type) ? " var-snackbar__wrapper-" + type : '';
      return "" + baseClass + verticalClass + typeClass;
    });
    var isForbidClick = (0, _vue.computed)(() => props.type === 'loading' || props.forbidClick);
    var iconName = (0, _vue.computed)(() => {
      if (!props.type) return '';
      return ICON_TYPE_DICT[props.type];
    });

    var updateAfterDuration = () => {
      timer.value = setTimeout(() => {
        var _props$onUpdateShow;

        props.type !== 'loading' && ((_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false));
      }, props.duration);
    };

    (0, _vue.watch)(() => props.show, show => {
      if (show) {
        props.onOpen == null ? void 0 : props.onOpen();
        updateAfterDuration();
      } else if (show === false) {
        clearTimeout(timer.value);
        props.onClose == null ? void 0 : props.onClose();
      }
    });
    (0, _vue.watch)(() => props._update, () => {
      clearTimeout(timer.value);
      updateAfterDuration();
    });
    (0, _vue.onMounted)(() => {
      if (props.show) {
        props.onOpen == null ? void 0 : props.onOpen();
        updateAfterDuration();
      }
    });
    return {
      zIndex,
      snackbarClass,
      iconName,
      isForbidClick
    };
  }

});

exports.default = _default;