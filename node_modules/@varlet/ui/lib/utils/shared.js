"use strict";

exports.__esModule = true;
exports.parseFormat = parseFormat;
exports.kebabCase = kebabCase;
exports.uniq = exports.inBrowser = exports.dt = exports.easeInOutCubic = exports.cubic = exports.linear = exports.createCache = exports.debounce = exports.throttle = exports.removeItem = exports.isEmpty = exports.isURL = exports.isArray = exports.isPlainObject = exports.isNumber = exports.isBool = exports.isString = exports.isHTMLSupportVideo = exports.isHTMLSupportImage = exports.toNumber = void 0;

var toNumber = val => {
  if (val == null) return 0;

  if (isString(val)) {
    val = parseFloat(val);
    val = Number.isNaN(val) ? 0 : val;
    return val;
  }

  if (isBool(val)) return Number(val);
  return val;
};

exports.toNumber = toNumber;

var isHTMLSupportImage = val => {
  if (val == null) {
    return false;
  }

  return val.startsWith('data:image') || /\.(png|jpg|gif|jpeg|svg)$/.test(val);
};

exports.isHTMLSupportImage = isHTMLSupportImage;

var isHTMLSupportVideo = val => {
  if (val == null) {
    return false;
  }

  return val.startsWith('data:video') || /\.(mp4|webm|ogg)$/.test(val);
};

exports.isHTMLSupportVideo = isHTMLSupportVideo;

var isString = val => typeof val === 'string';

exports.isString = isString;

var isBool = val => typeof val === 'boolean';

exports.isBool = isBool;

var isNumber = val => typeof val === 'number';

exports.isNumber = isNumber;

var isPlainObject = val => Object.prototype.toString.call(val) === '[object Object]';

exports.isPlainObject = isPlainObject;

var isArray = val => Array.isArray(val);

exports.isArray = isArray;

var isURL = val => {
  if (!val) {
    return false;
  }

  return /^(http)|(\.*\/)/.test(val);
};

exports.isURL = isURL;

var isEmpty = val => val === undefined || val === null || val === '' || Array.isArray(val) && !val.length;

exports.isEmpty = isEmpty;

var removeItem = (arr, item) => {
  if (arr.length) {
    var index = arr.indexOf(item);

    if (index > -1) {
      return arr.splice(index, 1);
    }
  }
};

exports.removeItem = removeItem;

var throttle = (method, mustRunDelay = 200) => {
  var timer;
  var start = 0;
  return function loop(...args) {
    var now = Date.now();
    var elapsed = now - start;

    if (!start) {
      start = now;
    }

    if (timer) {
      window.clearTimeout(timer);
    }

    if (elapsed >= mustRunDelay) {
      method.apply(this, args);
      start = now;
    } else {
      timer = window.setTimeout(() => {
        loop.apply(this, args);
      }, mustRunDelay - elapsed);
    }
  };
};

exports.throttle = throttle;

var debounce = (method, delay = 200) => {
  var timer;
  return function (...args) {
    timer && window.clearTimeout(timer);
    timer = window.setTimeout(() => {
      method.apply(this, args);
    }, delay);
  };
};

exports.debounce = debounce;

var createCache = max => {
  var cache = [];
  return {
    cache,

    has(key) {
      return this.cache.includes(key);
    },

    add(key) {
      if (this.has(key)) {
        return;
      }

      this.cache.length === max && cache.shift();
      this.cache.push(key);
    },

    remove(key) {
      this.has(key) && removeItem(this.cache, key);
    },

    clear() {
      this.cache.length = 0;
    }

  };
};

exports.createCache = createCache;

var linear = value => value;

exports.linear = linear;

var cubic = value => Math.pow(value, 3);

exports.cubic = cubic;

var easeInOutCubic = value => value < 0.5 ? cubic(value * 2) / 2 : 1 - cubic((1 - value) * 2) / 2;

exports.easeInOutCubic = easeInOutCubic;

function parseFormat(format, time) {
  var scannedTimes = Object.values(time);
  var scannedFormats = ['DD', 'HH', 'mm', 'ss'];
  var padValues = [24, 60, 60, 1000];
  scannedFormats.forEach((scannedFormat, index) => {
    if (!format.includes(scannedFormat)) {
      scannedTimes[index + 1] += scannedTimes[index] * padValues[index];
    } else {
      format = format.replace(scannedFormat, String(scannedTimes[index]).padStart(2, '0'));
    }
  });

  if (format.includes('S')) {
    var ms = String(scannedTimes[scannedTimes.length - 1]).padStart(3, '0');

    if (format.includes('SSS')) {
      format = format.replace('SSS', ms);
    } else if (format.includes('SS')) {
      format = format.replace('SS', ms.slice(0, 2));
    } else {
      format = format.replace('S', ms.slice(0, 1));
    }
  }

  return format;
}

var dt = (value, defaultText) => value == null ? defaultText : value;

exports.dt = dt;

var inBrowser = () => typeof window !== 'undefined';

exports.inBrowser = inBrowser;

var uniq = arr => [...new Set(arr)];

exports.uniq = uniq;

function kebabCase(str) {
  var reg = /([^-])([A-Z])/g;
  return str.replace(reg, '$1-$2').replace(reg, '$1-$2').toLowerCase();
}