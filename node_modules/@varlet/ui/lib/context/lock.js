"use strict";

exports.__esModule = true;
exports.resolveLock = resolveLock;
exports.addLock = addLock;
exports.releaseLock = releaseLock;
exports.useLock = useLock;

var _vue = require("vue");

var _ = _interopRequireDefault(require("."));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function resolveLock() {
  var lockCounts = Object.keys(_.default.locks).length;
  lockCounts <= 0 ? document.body.classList.remove('var--lock') : document.body.classList.add('var--lock');
}

function addLock(uid) {
  _.default.locks[uid] = 1;
  resolveLock();
}

function releaseLock(uid) {
  delete _.default.locks[uid];
  resolveLock();
}
/**
 * 组件锁操作
 * @param props 组件props
 * @param state 组件props中控制组件加锁的开关对应的key值
 * @param use 组件props中控制组件加锁的开关是否可用对应的key值
 */


function useLock(props, state, use) {
  var {
    uid
  } = (0, _vue.getCurrentInstance)();

  if (use) {
    (0, _vue.watch)(() => props[use], newValue => {
      if (newValue === false) {
        // 改变为禁用状态 组件解锁
        releaseLock(uid);
      } else if (newValue === true && props[state] === true) {
        // 改变为启用状态 并且popup处于开启状态 组件加锁
        addLock(uid);
      }
    });
  }

  (0, _vue.watch)(() => props[state], newValue => {
    if (use && props[use] === false) {
      return;
    }

    if (newValue === true) {
      // popup开启 组件加锁
      addLock(uid);
    } else {
      // popup关闭 组件解锁
      releaseLock(uid);
    }
  });
  (0, _vue.onBeforeMount)(() => {
    if (use && props[use] === false) {
      return;
    }

    if (props[state] === true) {
      // popup处于开启状态 组件挂载 组件加锁
      addLock(uid);
    }
  });
  (0, _vue.onUnmounted)(() => {
    if (use && props[use] === false) {
      return;
    }

    if (props[state] === true) {
      // popup处于开启状态 组件卸载 组件解锁
      releaseLock(uid);
    }
  });
  (0, _vue.onActivated)(() => {
    if (use && props[use] === false) {
      return;
    }

    if (props[state] === true) {
      // popup处于开启状态 组件处于keepalive前台 组件加锁
      addLock(uid);
    }
  });
  (0, _vue.onDeactivated)(() => {
    if (use && props[use] === false) {
      return;
    }

    if (props[state] === true) {
      // popup处于开启状态 组件处于keepalive后台 组件解锁
      releaseLock(uid);
    }
  });
}