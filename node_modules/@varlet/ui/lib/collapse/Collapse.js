"use strict";

exports.__esModule = true;
exports.render = render;
exports.default = void 0;

var _vue = require("vue");

var _provide = require("./provide");

var _props = require("./props");

var _shared = require("../utils/shared");

var _withScopeId = n => ((0, _vue.pushScopeId)(""), n = n(), (0, _vue.popScopeId)(), n);

var _hoisted_1 = {
  class: "var-collapse"
};

function render(_ctx, _cache) {
  return (0, _vue.openBlock)(), (0, _vue.createElementBlock)("div", _hoisted_1, [(0, _vue.renderSlot)(_ctx.$slots, "default")]);
}

var _default = (0, _vue.defineComponent)({
  render,
  name: 'VarCollapse',
  props: _props.props,

  setup(props) {
    var {
      length,
      collapseItem,
      bindCollapseItem
    } = (0, _provide.useCollapseItem)();
    var active = (0, _vue.computed)(() => props.modelValue);
    var offset = (0, _vue.computed)(() => props.offset);

    var checkValue = () => {
      if (!props.accordion && !(0, _shared.isArray)(props.modelValue)) {
        console.error('[Varlet] Collapse: type of prop "modelValue" should be an Array');
        return false;
      }

      if (props.accordion && (0, _shared.isArray)(props.modelValue)) {
        console.error('[Varlet] Collapse: type of prop "modelValue" should be a String or Number');
        return false;
      }

      return true;
    };

    var getValue = (value, isExpand) => {
      if (!checkValue()) return;
      if (isExpand) return props.accordion ? value : [...props.modelValue, value];
      return props.accordion ? null : props.modelValue.filter(name => name !== value);
    };

    var updateItem = (value, isExpand) => {
      var _props$onUpdateModel;

      var modelValue = getValue(value, isExpand);
      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, modelValue);
      props.onChange == null ? void 0 : props.onChange(modelValue);
    };

    var matchName = () => {
      if (props.accordion) {
        return collapseItem.find(({
          name
        }) => props.modelValue === name.value);
      }

      var filterItem = collapseItem.filter(({
        name
      }) => {
        if (name.value === undefined) return false;
        return props.modelValue.includes(name.value);
      });
      return filterItem.length ? filterItem : undefined;
    };

    var matchIndex = () => {
      if (props.accordion) {
        return collapseItem.find(({
          index,
          name
        }) => name.value === undefined ? props.modelValue === index.value : false);
      }

      return collapseItem.filter(({
        index,
        name
      }) => name.value === undefined ? props.modelValue.includes(index.value) : false);
    };

    var resize = () => {
      if (!checkValue()) return;
      var matchProviders = matchName() || matchIndex();

      if (props.accordion && !matchProviders || !props.accordion && !matchProviders.length) {
        collapseItem.forEach(provider => {
          provider.init(props.accordion, false);
        });
        return;
      }

      collapseItem.forEach(provider => {
        var isShow = props.accordion ? matchProviders === provider : matchProviders.includes(provider);
        provider.init(props.accordion, isShow);
      });
    };

    var collapseProvider = {
      active,
      offset,
      updateItem
    };
    bindCollapseItem(collapseProvider);
    (0, _vue.watch)(() => length.value, () => (0, _vue.nextTick)().then(resize));
    (0, _vue.watch)(() => props.modelValue, () => (0, _vue.nextTick)().then(resize));
  }

});

exports.default = _default;