import VarPopup from '../popup';
import VarButton from '../button';
import { props } from './props';
import { defineComponent, ref, watch } from 'vue';
import { dt } from '../utils/shared';
import { pack } from '../locale';
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, mergeProps as _mergeProps, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-dialog__title"
};
var _hoisted_2 = {
  class: "var-dialog__actions"
};
export function render(_ctx, _cache) {
  var _component_var_button = _resolveComponent("var-button");

  var _component_var_popup = _resolveComponent("var-popup");

  return _openBlock(), _createBlock(_component_var_popup, {
    class: "var-dialog__popup-radius",
    "var-dialog-cover": "",
    show: _ctx.popupShow,
    overlay: _ctx.overlay,
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    "lock-scroll": _ctx.lockScroll,
    "close-on-click-overlay": _ctx.popupCloseOnClickOverlay,
    teleport: _ctx.teleport,
    onOpen: _ctx.onOpen,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onOpened: _ctx.onOpened,
    onRouteChange: _ctx.onRouteChange,
    onClickOverlay: _ctx.handleClickOverlay
  }, {
    default: _withCtx(() => [_createElementVNode("div", _mergeProps({
      class: "var--box var-dialog"
    }, _ctx.$attrs), [_createElementVNode("div", _hoisted_1, [_renderSlot(_ctx.$slots, "title", {}, () => [_createTextVNode(_toDisplayString(_ctx.dt(_ctx.title, _ctx.pack.dialogTitle)), 1
    /* TEXT */
    )])]), _createElementVNode("div", {
      class: "var-dialog__message",
      style: _normalizeStyle({
        textAlign: _ctx.messageAlign
      })
    }, [_renderSlot(_ctx.$slots, "default", {}, () => [_createTextVNode(_toDisplayString(_ctx.message), 1
    /* TEXT */
    )])], 4
    /* STYLE */
    ), _createElementVNode("div", _hoisted_2, [_ctx.cancelButton ? (_openBlock(), _createBlock(_component_var_button, {
      key: 0,
      class: "var-dialog__button var-dialog__cancel-button",
      "var-dialog-cover": "",
      text: "",
      "text-color": _ctx.cancelButtonTextColor,
      color: _ctx.cancelButtonColor,
      onClick: _ctx.cancel
    }, {
      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.dt(_ctx.cancelButtonText, _ctx.pack.dialogCancelButtonText)), 1
      /* TEXT */
      )]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["text-color", "color", "onClick"])) : _createCommentVNode("v-if", true), _ctx.confirmButton ? (_openBlock(), _createBlock(_component_var_button, {
      key: 1,
      class: "var-dialog__button var-dialog__confirm-button",
      "var-dialog-cover": "",
      text: "",
      "text-color": _ctx.confirmButtonTextColor,
      color: _ctx.confirmButtonColor,
      onClick: _ctx.confirm
    }, {
      default: _withCtx(() => [_createTextVNode(_toDisplayString(_ctx.dt(_ctx.confirmButtonText, _ctx.pack.dialogConfirmButtonText)), 1
      /* TEXT */
      )]),
      _: 1
      /* STABLE */

    }, 8
    /* PROPS */
    , ["text-color", "color", "onClick"])) : _createCommentVNode("v-if", true)])], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["show", "overlay", "overlay-class", "overlay-style", "lock-scroll", "close-on-click-overlay", "teleport", "onOpen", "onClose", "onClosed", "onOpened", "onRouteChange", "onClickOverlay"]);
}
export default defineComponent({
  render,
  name: 'VarDialog',
  components: {
    VarPopup,
    VarButton
  },
  inheritAttrs: false,
  props,

  setup(props) {
    var popupShow = ref(false);
    var popupCloseOnClickOverlay = ref(false);

    var done = () => {
      var _props$onUpdateShow;

      return (_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false);
    };

    var handleClickOverlay = () => {
      var _props$onUpdateShow2;

      var {
        closeOnClickOverlay,
        onClickOverlay,
        onBeforeClose
      } = props;
      onClickOverlay == null ? void 0 : onClickOverlay();

      if (!closeOnClickOverlay) {
        return;
      }

      if (onBeforeClose != null) {
        onBeforeClose('close', done);
        return;
      }

      (_props$onUpdateShow2 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow2.call(props, false);
    };

    var confirm = () => {
      var _props$onUpdateShow3;

      var {
        onBeforeClose,
        onConfirm
      } = props;
      onConfirm == null ? void 0 : onConfirm();

      if (onBeforeClose != null) {
        onBeforeClose('confirm', done);
        return;
      }

      (_props$onUpdateShow3 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow3.call(props, false);
    };

    var cancel = () => {
      var _props$onUpdateShow4;

      var {
        onBeforeClose,
        onCancel
      } = props;
      onCancel == null ? void 0 : onCancel();

      if (onBeforeClose != null) {
        onBeforeClose('cancel', done);
        return;
      }

      (_props$onUpdateShow4 = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow4.call(props, false);
    };

    watch(() => props.show, newValue => {
      popupShow.value = newValue;
    }, {
      immediate: true
    });
    watch(() => props.closeOnClickOverlay, newValue => {
      if (props.onBeforeClose != null) {
        popupCloseOnClickOverlay.value = false;
        return;
      }

      popupCloseOnClickOverlay.value = newValue;
    }, {
      immediate: true
    });
    return {
      pack,
      dt,
      popupShow,
      popupCloseOnClickOverlay,
      handleClickOverlay,
      confirm,
      cancel
    };
  }

});