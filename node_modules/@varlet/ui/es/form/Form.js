function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { defineComponent, computed } from 'vue';
import { props } from './props';
import { useFormItems } from './provide';
import { renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-form"
};
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", _hoisted_1, [_renderSlot(_ctx.$slots, "default")]);
}
export default defineComponent({
  render,
  name: 'VarForm',
  props,

  setup(props) {
    var disabled = computed(() => props.disabled);
    var readonly = computed(() => props.readonly);
    var {
      formItems,
      bindFormItems
    } = useFormItems(); // expose

    var validate = /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* () {
        var res = yield Promise.all(formItems.map(({
          validate
        }) => validate()));
        return res.every(r => r === true);
      });

      return function validate() {
        return _ref.apply(this, arguments);
      };
    }(); // expose


    var reset = () => formItems.forEach(({
      reset
    }) => reset()); // expose


    var resetValidation = () => formItems.forEach(({
      resetValidation
    }) => resetValidation());

    var formProvider = {
      disabled,
      readonly
    };
    bindFormItems(formProvider);
    return {
      validate,
      reset,
      resetValidation
    };
  }

});