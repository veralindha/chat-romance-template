import { defineComponent, ref, nextTick, watch, computed } from 'vue';
import { requestAnimationFrame } from '../utils/elements';
import { isArray } from '../utils/shared';
import { useCollapse } from './provide';
import { props } from './props';
import VarIcon from '../icon';
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode, vShow as _vShow, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-collapse-item-header__title"
};
var _hoisted_2 = {
  class: "var-collapse-item-header__icon"
};
var _hoisted_3 = {
  class: "var-collapse-item__wrap"
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass({
      'var-collapse-item': true,
      'var-collapse-item__active': _ctx.offset && _ctx.isShow,
      'var-collapse-item__disable': _ctx.disabled
    })
  }, [_createElementVNode("div", {
    class: "var-collapse-item-header",
    onClick: _cache[0] || (_cache[0] = $event => _ctx.toggle())
  }, [_createElementVNode("div", _hoisted_1, [_renderSlot(_ctx.$slots, "title", {}, () => [_createTextVNode(_toDisplayString(_ctx.title), 1
  /* TEXT */
  )])]), _createElementVNode("div", _hoisted_2, [_renderSlot(_ctx.$slots, "icon", {}, () => [_createVNode(_component_var_icon, {
    name: _ctx.icon,
    transition: 250,
    class: _normalizeClass({
      'var-collapse-item-header__icon': true,
      'var-collapse-item-header__open': _ctx.isShow && _ctx.icon === 'chevron-down',
      'var-collapse-item-header__disable': _ctx.disabled
    })
  }, null, 8
  /* PROPS */
  , ["name", "class"])])])]), _withDirectives(_createElementVNode("div", {
    class: "var-collapse-item-content",
    ref: "contentEl",
    onTransitionend: _cache[1] || (_cache[1] = (...args) => _ctx.transitionend && _ctx.transitionend(...args))
  }, [_createElementVNode("div", _hoisted_3, [_renderSlot(_ctx.$slots, "default")])], 544
  /* HYDRATE_EVENTS, NEED_PATCH */
  ), [[_vShow, _ctx.show]])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarCollapseItem',
  components: {
    VarIcon
  },
  props,

  setup(props) {
    var {
      index,
      collapse,
      bindCollapse
    } = useCollapse();
    var contentEl = ref(null);
    var show = ref(false);
    var isShow = ref(false);
    var {
      active,
      offset,
      updateItem
    } = collapse;
    var name = computed(() => props.name);

    var init = (accordion, show) => {
      if (active.value === undefined || accordion && isArray(active.value) || show === isShow.value) return;
      isShow.value = show;
      toggle(true);
    };

    var toggle = initOrAccordion => {
      if (props.disabled) return;

      if (!initOrAccordion) {
        updateItem(props.name || index.value, !isShow.value);
      }
    };

    var openPanel = () => {
      if (!contentEl.value) return;
      contentEl.value.style.height = '';
      show.value = true;
      nextTick(() => {
        var {
          offsetHeight
        } = contentEl.value;
        contentEl.value.style.height = 0 + 'px';
        requestAnimationFrame(() => {
          ;
          contentEl.value.style.height = offsetHeight + 'px';
        });
      });
    };

    var closePanel = () => {
      if (!contentEl.value) return;
      contentEl.value.style.height = 0 + 'px';
    };

    var transitionend = () => {
      if (!isShow.value) {
        show.value = false;
        contentEl.value.style.height = '';
      }
    };

    var collapseItemProvider = {
      index,
      name,
      init
    };
    bindCollapse(collapseItemProvider);
    watch(isShow, value => {
      if (value) openPanel();else closePanel();
    });
    return {
      show,
      isShow,
      offset,
      toggle,
      contentEl,
      transitionend
    };
  }

});