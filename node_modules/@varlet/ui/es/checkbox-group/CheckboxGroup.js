import VarFormDetails from '../form-details';
import { defineComponent, computed, watch, nextTick } from 'vue';
import { props } from './props';
import { useValidation } from '../utils/components';
import { useCheckboxes } from './provide';
import { useForm } from '../form/provide';
import { uniq } from '../utils/shared';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-checkbox-group__wrap"
};
export function render(_ctx, _cache) {
  var _component_var_form_details = _resolveComponent("var-form-details");

  return _openBlock(), _createElementBlock("div", _hoisted_1, [_createElementVNode("div", {
    class: _normalizeClass(["var-checkbox-group", ["var-checkbox-group--" + _ctx.direction]])
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  ), _createVNode(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])]);
}
export default defineComponent({
  render,
  name: 'VarCheckboxGroup',
  components: {
    VarFormDetails
  },
  props,

  setup(props) {
    var max = computed(() => props.max);
    var checkedCount = computed(() => props.modelValue.length);
    var {
      length,
      checkboxes,
      bindCheckboxes
    } = useCheckboxes();
    var {
      bindForm
    } = useForm();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();
    var checkboxGroupErrorMessage = computed(() => errorMessage.value);

    var validateWithTrigger = trigger => {
      nextTick(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var change = changedModelValue => {
      var _props$onUpdateModel;

      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, changedModelValue);
      props.onChange == null ? void 0 : props.onChange(changedModelValue);
      validateWithTrigger('onChange');
    };

    var onChecked = changedValue => {
      var {
        modelValue
      } = props;

      if (!modelValue.includes(changedValue)) {
        change([...modelValue, changedValue]);
      }
    };

    var onUnchecked = changedValue => {
      var {
        modelValue
      } = props;

      if (!modelValue.includes(changedValue)) {
        return;
      }

      change(modelValue.filter(value => value !== changedValue));
    };

    var syncCheckboxes = () => checkboxes.forEach(({
      sync
    }) => sync(props.modelValue)); // expose


    var checkAll = () => {
      var _props$onUpdateModel2;

      var checkedValues = checkboxes.map(({
        checkedValue
      }) => checkedValue.value);
      var changedModelValue = uniq(checkedValues);
      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, changedModelValue);
      return changedModelValue;
    }; // expose


    var inverseAll = () => {
      var _props$onUpdateModel3;

      var checkedValues = checkboxes.filter(({
        checked
      }) => !checked.value).map(({
        checkedValue
      }) => checkedValue.value);
      var changedModelValue = uniq(checkedValues);
      (_props$onUpdateModel3 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel3.call(props, changedModelValue);
      return changedModelValue;
    }; // expose


    var reset = () => {
      var _props$onUpdateModel4;

      (_props$onUpdateModel4 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel4.call(props, []);
      resetValidation();
    }; // expose


    var validate = () => v(props.rules, props.modelValue);

    watch(() => props.modelValue, syncCheckboxes, {
      deep: true
    });
    watch(() => length.value, syncCheckboxes);
    var checkboxGroupProvider = {
      max,
      checkedCount,
      onChecked,
      onUnchecked,
      validate,
      resetValidation,
      reset,
      errorMessage: checkboxGroupErrorMessage
    };
    bindCheckboxes(checkboxGroupProvider);
    bindForm == null ? void 0 : bindForm(checkboxGroupProvider);
    return {
      errorMessage,
      checkAll,
      inverseAll,
      reset,
      validate,
      resetValidation
    };
  }

});