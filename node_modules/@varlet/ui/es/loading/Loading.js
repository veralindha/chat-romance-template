import { computed, defineComponent } from 'vue';
import { props } from './props';
import { toNumber } from '../utils/shared';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-loading"
};
var _hoisted_2 = {
  key: 0,
  class: "var-loading__circle"
};

var _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode("svg", {
  viewBox: "25 25 50 50"
}, [/*#__PURE__*/_createElementVNode("circle", {
  cx: "50",
  cy: "50",
  r: "20",
  fill: "none"
})], -1
/* HOISTED */
));

var _hoisted_4 = [_hoisted_3];
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", _hoisted_1, [_ctx.$slots.default ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: _normalizeClass(["var-loading__content", [_ctx.loading ? 'var-loading__content--active' : null]])
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  )) : _createCommentVNode("v-if", true), _ctx.isShow ? (_openBlock(), _createElementBlock("div", {
    key: 1,
    class: _normalizeClass(["var--box var-loading__body", [_ctx.$slots.default ? 'var-loading__inside' : null]])
  }, [_ctx.type === 'circle' ? (_openBlock(), _createElementBlock("div", _hoisted_2, [_createElementVNode("span", {
    class: "var-loading__circle-block",
    style: _normalizeStyle({
      width: _ctx.getRadius * 2 + 'px',
      height: _ctx.getRadius * 2 + 'px',
      color: _ctx.color
    })
  }, _hoisted_4, 4
  /* STYLE */
  )])) : _createCommentVNode("v-if", true), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.loadingTypeDict, (nums, key) => {
    return _openBlock(), _createElementBlock(_Fragment, {
      key: key
    }, [_ctx.type === key ? (_openBlock(), _createElementBlock("div", {
      key: 0,
      class: _normalizeClass("var-loading__" + key + " var-loading__" + key + "-" + _ctx.size)
    }, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(nums, num => {
      return _openBlock(), _createElementBlock("div", {
        key: num + key,
        style: _normalizeStyle({
          backgroundColor: _ctx.color
        }),
        class: _normalizeClass("var-loading__" + key + "-item var-loading__" + key + "-item-" + _ctx.size)
      }, null, 6
      /* CLASS, STYLE */
      );
    }), 128
    /* KEYED_FRAGMENT */
    ))], 2
    /* CLASS */
    )) : _createCommentVNode("v-if", true)], 64
    /* STABLE_FRAGMENT */
    );
  }), 128
  /* KEYED_FRAGMENT */
  )), _ctx.$slots.description || _ctx.description ? (_openBlock(), _createElementBlock("div", {
    key: 1,
    class: _normalizeClass(["var-loading__description", "var-loading__description--" + _ctx.size]),
    style: _normalizeStyle({
      color: _ctx.color
    })
  }, [_renderSlot(_ctx.$slots, "description", {}, () => [_createTextVNode(_toDisplayString(_ctx.description), 1
  /* TEXT */
  )])], 6
  /* CLASS, STYLE */
  )) : _createCommentVNode("v-if", true)], 2
  /* CLASS */
  )) : _createCommentVNode("v-if", true)]);
}
export default defineComponent({
  render,
  name: 'VarLoading',
  props,

  setup(props, {
    slots
  }) {
    var loadingTypeDict = {
      wave: 5,
      cube: 4,
      rect: 8,
      disappear: 3
    };
    var sizeDict = {
      mini: 9,
      small: 12,
      normal: 15,
      large: 18
    };
    var getRadius = computed(() => {
      return props.radius ? toNumber(props.radius) : sizeDict[props.size];
    });
    var isShow = computed(() => {
      if (!(slots.default != null && slots.default())) return true;
      return props.loading;
    });
    return {
      loadingTypeDict,
      getRadius,
      isShow
    };
  }

});