import VarFormDetails from '../form-details';
import { computed, defineComponent, nextTick, watch } from 'vue';
import { props } from './props';
import { useValidation } from '../utils/components';
import { useRadios } from './provide';
import { useForm } from '../form/provide';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-radio-group__wrap"
};
export function render(_ctx, _cache) {
  var _component_var_form_details = _resolveComponent("var-form-details");

  return _openBlock(), _createElementBlock("div", _hoisted_1, [_createElementVNode("div", {
    class: _normalizeClass(["var-radio-group", ["var-radio-group--" + _ctx.direction]])
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  ), _createVNode(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])]);
}
export default defineComponent({
  render,
  name: 'VarRadioGroup',
  components: {
    VarFormDetails
  },
  props,

  setup(props) {
    var {
      length,
      radios,
      bindRadios
    } = useRadios();
    var {
      bindForm
    } = useForm();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();
    var radioGroupErrorMessage = computed(() => errorMessage.value);

    var validateWithTrigger = trigger => {
      nextTick(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var syncRadios = () => radios.forEach(({
      sync
    }) => sync(props.modelValue));

    var onToggle = changedValue => {
      var _props$onUpdateModel;

      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, changedValue);
      props.onChange == null ? void 0 : props.onChange(changedValue);
      validateWithTrigger('onChange');
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var reset = () => {
      var _props$onUpdateModel2;

      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, undefined);
      resetValidation();
    };

    watch(() => props.modelValue, syncRadios);
    watch(() => length.value, syncRadios);
    var radioGroupProvider = {
      onToggle,
      validate,
      reset,
      resetValidation,
      errorMessage: radioGroupErrorMessage
    };
    bindForm == null ? void 0 : bindForm(radioGroupProvider);
    bindRadios(radioGroupProvider);
    return {
      errorMessage,
      reset,
      validate,
      resetValidation
    };
  }

});