import { defineComponent, watch } from 'vue';
import { props } from './props';
import { useCols } from './provide';
import { toPxNum } from '../utils/elements';
import { renderSlot as _renderSlot, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: "var-row var--box",
    style: _normalizeStyle({
      justifyContent: _ctx.justify,
      alignItems: _ctx.align
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, [_renderSlot(_ctx.$slots, "default")], 4
  /* STYLE */
  );
}
export default defineComponent({
  render,
  name: 'VarRow',
  props,

  setup(props) {
    var {
      cols,
      bindCols,
      length
    } = useCols();

    var computeGroups = () => {
      var groups = [[]];
      var span = 0;
      cols.forEach(col => {
        var colSpan = col.span.value + col.offset.value;
        var nextSpan = span + colSpan;

        if (nextSpan > 24) {
          groups.push([col]);
          span = colSpan;
        } else {
          groups[groups.length - 1].push(col);
          span += colSpan;
        }
      });
      return groups;
    };

    var computePadding = () => {
      var groups = computeGroups();
      var gutter = toPxNum(props.gutter);
      var average = gutter / 2;
      groups.forEach(cols => {
        cols.forEach((col, index) => {
          if (cols.length <= 1) {
            return;
          }

          if (index === 0) {
            col.setPadding({
              left: 0,
              right: average
            });
          }

          if (index === cols.length - 1) {
            col.setPadding({
              left: average,
              right: 0
            });
          }

          if (index > 0 && index < cols.length - 1) {
            col.setPadding({
              left: average,
              right: average
            });
          }
        });
      });
    };

    var rowProvider = {
      computePadding
    };
    watch(() => length.value, computePadding);
    watch(() => props.gutter, computePadding);
    bindCols(rowProvider);
  }

});