import { defineComponent, watch, ref, onMounted, computed } from 'vue';
import VarLoading from '../loading';
import VarIcon from '../icon';
import { useZIndex } from '../context/zIndex';
import { props } from './props';
import { useLock } from '../context/lock';
import { SNACKBAR_TYPE } from './index';
var ICON_TYPE_DICT = {
  success: 'checkbox-marked-circle',
  warning: 'warning',
  info: 'information',
  error: 'error',
  loading: ''
};
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeStyle as _normalizeStyle, vShow as _vShow, withDirectives as _withDirectives, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-snackbar__action"
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_loading = _resolveComponent("var-loading");

  return _withDirectives((_openBlock(), _createElementBlock("div", {
    class: "var-snackbar",
    style: _normalizeStyle({
      pointerEvents: _ctx.isForbidClick ? 'auto' : 'none',
      zIndex: _ctx.zIndex
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(_ctx.snackbarClass),
    style: _normalizeStyle({
      zIndex: _ctx.zIndex
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-snackbar__content", [_ctx.contentClass]])
  }, [_renderSlot(_ctx.$slots, "default", {}, () => [_createTextVNode(_toDisplayString(_ctx.content), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  ), _createElementVNode("div", _hoisted_1, [_ctx.iconName ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 0,
    name: _ctx.iconName
  }, null, 8
  /* PROPS */
  , ["name"])) : _createCommentVNode("v-if", true), _ctx.type === 'loading' ? (_openBlock(), _createBlock(_component_var_loading, {
    key: 1,
    type: _ctx.loadingType,
    size: _ctx.loadingSize
  }, null, 8
  /* PROPS */
  , ["type", "size"])) : _createCommentVNode("v-if", true), _renderSlot(_ctx.$slots, "action")])], 6
  /* CLASS, STYLE */
  )], 4
  /* STYLE */
  )), [[_vShow, _ctx.show]]);
}
export default defineComponent({
  render,
  name: 'VarSnackbarCore',
  components: {
    VarLoading,
    VarIcon
  },
  props,

  setup(props) {
    var timer = ref(null);
    var {
      zIndex
    } = useZIndex(() => props.show, 1);
    useLock(props, 'show', 'lockScroll');
    var snackbarClass = computed(() => {
      var {
        position,
        vertical,
        type
      } = props;
      var baseClass = "var-snackbar__wrapper var-snackbar__wrapper-" + position + " var-elevation--4";
      var verticalClass = vertical ? ' var-snackbar__vertical' : '';
      var typeClass = type && SNACKBAR_TYPE.includes(type) ? " var-snackbar__wrapper-" + type : '';
      return "" + baseClass + verticalClass + typeClass;
    });
    var isForbidClick = computed(() => props.type === 'loading' || props.forbidClick);
    var iconName = computed(() => {
      if (!props.type) return '';
      return ICON_TYPE_DICT[props.type];
    });

    var updateAfterDuration = () => {
      timer.value = setTimeout(() => {
        var _props$onUpdateShow;

        props.type !== 'loading' && ((_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false));
      }, props.duration);
    };

    watch(() => props.show, show => {
      if (show) {
        props.onOpen == null ? void 0 : props.onOpen();
        updateAfterDuration();
      } else if (show === false) {
        clearTimeout(timer.value);
        props.onClose == null ? void 0 : props.onClose();
      }
    });
    watch(() => props._update, () => {
      clearTimeout(timer.value);
      updateAfterDuration();
    });
    onMounted(() => {
      if (props.show) {
        props.onOpen == null ? void 0 : props.onOpen();
        updateAfterDuration();
      }
    });
    return {
      zIndex,
      snackbarClass,
      iconName,
      isForbidClick
    };
  }

});