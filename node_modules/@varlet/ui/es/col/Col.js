import { defineComponent, ref, computed, watch } from 'vue';
import { toNumber } from '../utils/shared';
import { props } from './props';
import { useRow } from './provide';
import { toSizeUnit } from '../utils/elements';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-col var--box", [_ctx.span ? "var-col--span-" + _ctx.toNumber(_ctx.span) : null, _ctx.offset ? "var-col--offset-" + _ctx.toNumber(_ctx.offset) : null]]),
    style: _normalizeStyle({
      paddingLeft: _ctx.toSizeUnit(_ctx.padding.left),
      paddingRight: _ctx.toSizeUnit(_ctx.padding.right)
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, [_renderSlot(_ctx.$slots, "default")], 6
  /* CLASS, STYLE */
  );
}
export default defineComponent({
  render,
  name: 'VarCol',
  props,

  setup(props) {
    var padding = ref({
      left: 0,
      right: 0
    });
    var span = computed(() => toNumber(props.span));
    var offset = computed(() => toNumber(props.offset));
    var {
      row,
      bindRow
    } = useRow();
    var colProvider = {
      span,
      offset,

      setPadding(pad) {
        padding.value = pad;
      }

    };
    watch([() => props.span, () => props.offset], () => {
      row == null ? void 0 : row.computePadding();
    });
    bindRow == null ? void 0 : bindRow(colProvider);
    return {
      padding,
      toNumber,
      toSizeUnit
    };
  }

});