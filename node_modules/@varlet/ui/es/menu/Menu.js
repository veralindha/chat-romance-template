function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

import { defineComponent, ref, watch, onMounted, onUnmounted } from 'vue';
import { props } from './props';
import { getLeft, getTop, toSizeUnit } from '../utils/elements';
import { useZIndex } from '../context/zIndex';
import { useTeleport } from '../utils/components';
import { renderSlot as _renderSlot, vShow as _vShow, withModifiers as _withModifiers, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, withDirectives as _withDirectives, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, Teleport as _Teleport, openBlock as _openBlock, createBlock as _createBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: "var-menu",
    ref: "host",
    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [_renderSlot(_ctx.$slots, "default"), (_openBlock(), _createBlock(_Teleport, {
    to: _ctx.teleport,
    disabled: !_ctx.teleport || _ctx.disabled
  }, [_createVNode(_Transition, {
    name: "var-menu",
    onAfterEnter: _ctx.onOpened,
    onAfterLeave: _ctx.onClosed
  }, {
    default: _withCtx(() => [_withDirectives(_createElementVNode("div", {
      class: "var-menu__menu var-elevation--3",
      ref: "menu",
      style: _normalizeStyle({
        top: "calc(" + _ctx.top + "px + " + _ctx.toSizeUnit(_ctx.offsetY) + ")",
        left: "calc(" + _ctx.left + "px + " + _ctx.toSizeUnit(_ctx.offsetX) + ")",
        zIndex: _ctx.zIndex
      }),
      onClick: _cache[0] || (_cache[0] = _withModifiers(() => {}, ["stop"]))
    }, [_renderSlot(_ctx.$slots, "menu")], 4
    /* STYLE */
    ), [[_vShow, _ctx.show]])]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["onAfterEnter", "onAfterLeave"])], 8
  /* PROPS */
  , ["to", "disabled"]))], 512
  /* NEED_PATCH */
  );
}
export default defineComponent({
  render,
  name: 'VarMenu',
  props,

  setup(props) {
    var host = ref(null);
    var menu = ref(null);
    var top = ref(0);
    var left = ref(0);
    var {
      zIndex
    } = useZIndex(() => props.show, 1);
    var {
      disabled
    } = useTeleport();
    var clickSelf = false;

    var computeTop = alignment => {
      return alignment === 'top' ? getTop(host.value) : getTop(host.value) - menu.value.offsetHeight;
    };

    var handleClick = () => {
      clickSelf = true;
    };

    var handleMenuClose = () => {
      var _props$onUpdateShow;

      if (clickSelf) {
        clickSelf = false;
        return;
      }

      if (!props.show) {
        return;
      }

      (_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false);
    }; // expose


    var resize = () => {
      top.value = computeTop(props.alignment);
      left.value = getLeft(host.value);
    };

    watch(() => props.alignment, resize);
    watch(() => props.show, /*#__PURE__*/function () {
      var _ref = _asyncToGenerator(function* (newValue) {
        var {
          onOpen,
          onClose
        } = props;
        newValue && resize();
        newValue ? onOpen == null ? void 0 : onOpen() : onClose == null ? void 0 : onClose();
      });

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());
    onMounted(() => {
      resize();
      document.addEventListener('click', handleMenuClose);
      window.addEventListener('resize', resize);
    });
    onUnmounted(() => {
      document.removeEventListener('click', handleMenuClose);
      window.removeEventListener('resize', resize);
    });
    return {
      disabled,
      zIndex,
      host,
      menu,
      top,
      left,
      toSizeUnit,
      handleClick,
      resize
    };
  }

});