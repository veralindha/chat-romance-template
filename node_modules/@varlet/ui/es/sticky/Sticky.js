import { defineComponent, ref, onMounted, onUnmounted, onActivated, onDeactivated, computed, watch } from 'vue';
import { props } from './props';
import { getParentScroller, toPxNum } from '../utils/elements';
import { toNumber } from '../utils/shared';
import { renderSlot as _renderSlot, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-sticky", [_ctx.enableCSSMode ? 'var-sticky--css-mode' : null]]),
    ref: "stickyEl",
    style: _normalizeStyle({
      zIndex: _ctx.toNumber(_ctx.zIndex),
      top: _ctx.enableCSSMode ? _ctx.offsetTop + "px" : undefined,
      width: _ctx.enableFixedMode ? _ctx.fixedWidth : undefined,
      height: _ctx.enableFixedMode ? _ctx.fixedHeight : undefined
    })
  }, [_createElementVNode("div", {
    class: "var-sticky__wrapper",
    ref: "wrapperEl",
    style: _normalizeStyle({
      zIndex: _ctx.toNumber(_ctx.zIndex),
      position: _ctx.enableFixedMode ? 'fixed' : undefined,
      width: _ctx.enableFixedMode ? _ctx.fixedWrapperWidth : undefined,
      height: _ctx.enableFixedMode ? _ctx.fixedWrapperHeight : undefined,
      left: _ctx.enableFixedMode ? _ctx.fixedLeft : undefined,
      top: _ctx.enableFixedMode ? _ctx.fixedTop : undefined
    })
  }, [_renderSlot(_ctx.$slots, "default")], 4
  /* STYLE */
  )], 6
  /* CLASS, STYLE */
  );
}
export default defineComponent({
  render,
  name: 'VarSticky',
  props,

  setup(props) {
    var stickyEl = ref(null);
    var wrapperEl = ref(null);
    var isFixed = ref(false);
    var fixedTop = ref('0px');
    var fixedLeft = ref('0px');
    var fixedWidth = ref('auto');
    var fixedHeight = ref('auto');
    var fixedWrapperWidth = ref('auto');
    var fixedWrapperHeight = ref('auto');
    var enableCSSMode = computed(() => !props.disabled && props.cssMode);
    var enableFixedMode = computed(() => !props.disabled && isFixed.value);
    var offsetTop = computed(() => toPxNum(props.offsetTop));
    var scroller;

    var handleScroll = () => {
      var {
        onScroll,
        cssMode,
        disabled
      } = props;

      if (disabled) {
        return;
      }

      var scrollerTop = 0;

      if (scroller !== window) {
        var {
          top
        } = scroller.getBoundingClientRect();
        scrollerTop = top;
      }

      var wrapper = wrapperEl.value;
      var sticky = stickyEl.value;
      var {
        top: stickyTop,
        left: stickyLeft
      } = sticky.getBoundingClientRect();
      var currentOffsetTop = stickyTop - scrollerTop;

      if (currentOffsetTop <= offsetTop.value) {
        if (!cssMode) {
          fixedWidth.value = sticky.offsetWidth + "px";
          fixedHeight.value = sticky.offsetHeight + "px";
          fixedTop.value = scrollerTop + offsetTop.value + "px";
          fixedLeft.value = stickyLeft + "px";
          fixedWrapperWidth.value = wrapper.offsetWidth + "px";
          fixedWrapperHeight.value = wrapper.offsetHeight + "px";
          isFixed.value = true;
        }

        onScroll == null ? void 0 : onScroll(offsetTop.value, true);
      } else {
        isFixed.value = false;
        onScroll == null ? void 0 : onScroll(currentOffsetTop, false);
      }
    };

    var addScrollListener = () => {
      scroller = getParentScroller(stickyEl.value);
      scroller !== window && scroller.addEventListener('scroll', handleScroll);
      window.addEventListener('scroll', handleScroll);
      handleScroll();
    };

    var removeScrollListener = () => {
      scroller !== window && scroller.removeEventListener('scroll', handleScroll);
      window.removeEventListener('scroll', handleScroll);
    };

    watch(() => props.disabled, handleScroll);
    onActivated(addScrollListener);
    onDeactivated(removeScrollListener);
    onMounted(addScrollListener);
    onUnmounted(removeScrollListener);
    return {
      stickyEl,
      wrapperEl,
      isFixed,
      offsetTop,
      fixedTop,
      fixedLeft,
      fixedWidth,
      fixedHeight,
      fixedWrapperWidth,
      fixedWrapperHeight,
      enableCSSMode,
      enableFixedMode,
      toNumber
    };
  }

});