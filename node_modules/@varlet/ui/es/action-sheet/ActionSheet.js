import Ripple from '../ripple';
import VarPopup from '../popup';
import VarIcon from '../icon';
import { defineComponent, ref, watch } from 'vue';
import { props } from './props';
import { dt } from '../utils/shared';
import { pack } from '../locale';
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, resolveComponent as _resolveComponent, createBlock as _createBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, mergeProps as _mergeProps, withCtx as _withCtx, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-action-sheet__title"
};
var _hoisted_2 = ["onClick"];
var _hoisted_3 = {
  class: "var-action-sheet__action-name"
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_popup = _resolveComponent("var-popup");

  var _directive_ripple = _resolveDirective("ripple");

  return _openBlock(), _createBlock(_component_var_popup, _mergeProps({
    class: "var-action-sheet__popup-radius",
    position: "bottom",
    overlay: _ctx.overlay,
    "overlay-class": _ctx.overlayClass,
    "overlay-style": _ctx.overlayStyle,
    "lock-scroll": _ctx.lockScroll,
    "close-on-click-overlay": _ctx.closeOnClickOverlay,
    teleport: _ctx.teleport,
    show: _ctx.popupShow
  }, {
    'onUpdate:show': value => {
      var _ctx$$props$onUpdate, _ctx$$props;

      return (_ctx$$props$onUpdate = (_ctx$$props = _ctx.$props)['onUpdate:show']) == null ? void 0 : _ctx$$props$onUpdate.call(_ctx$$props, value);
    }
  }, {
    onOpen: _ctx.onOpen,
    onClose: _ctx.onClose,
    onClosed: _ctx.onClosed,
    onOpened: _ctx.onOpened,
    onRouteChange: _ctx.onRouteChange
  }), {
    default: _withCtx(() => [_createElementVNode("div", _mergeProps({
      class: "var-action-sheet var--box"
    }, _ctx.$attrs), [_renderSlot(_ctx.$slots, "title", {}, () => [_createElementVNode("div", _hoisted_1, _toDisplayString(_ctx.dt(_ctx.title, _ctx.pack.actionSheetTitle)), 1
    /* TEXT */
    )]), _renderSlot(_ctx.$slots, "actions", {}, () => [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.actions, action => {
      return _withDirectives((_openBlock(), _createElementBlock("div", {
        class: _normalizeClass(["var-action-sheet__action-item", [action.className, action.disabled ? 'var-action-sheet--disabled' : null]]),
        key: action.name,
        style: _normalizeStyle({
          color: action.color
        }),
        onClick: $event => _ctx.handleSelect(action)
      }, [action.icon ? (_openBlock(), _createBlock(_component_var_icon, {
        key: 0,
        class: "var-action-sheet__action-icon",
        "var-action-sheet-cover": "",
        name: action.icon,
        size: action.iconSize
      }, null, 8
      /* PROPS */
      , ["name", "size"])) : _createCommentVNode("v-if", true), _createElementVNode("div", _hoisted_3, _toDisplayString(action.name), 1
      /* TEXT */
      )], 14
      /* CLASS, STYLE, PROPS */
      , _hoisted_2)), [[_directive_ripple, {
        disabled: action.disabled
      }]]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])], 16
    /* FULL_PROPS */
    )]),
    _: 3
    /* FORWARDED */

  }, 16
  /* FULL_PROPS */
  , ["overlay", "overlay-class", "overlay-style", "lock-scroll", "close-on-click-overlay", "teleport", "show", "onOpen", "onClose", "onClosed", "onOpened", "onRouteChange"]);
}
export default defineComponent({
  render,
  name: 'VarActionSheet',
  directives: {
    Ripple
  },
  components: {
    VarPopup,
    VarIcon
  },
  inheritAttrs: false,
  props,

  setup(props) {
    var popupShow = ref(false);

    var handleSelect = action => {
      var _props$onUpdateShow;

      if (action.disabled) {
        return;
      }

      var {
        closeOnClickAction,
        onSelect
      } = props;
      onSelect == null ? void 0 : onSelect(action);
      closeOnClickAction && ((_props$onUpdateShow = props['onUpdate:show']) == null ? void 0 : _props$onUpdateShow.call(props, false));
    };

    watch(() => props.show, newValue => {
      popupShow.value = newValue;
    }, {
      immediate: true
    });
    return {
      popupShow,
      pack,
      dt,
      handleSelect
    };
  }

});