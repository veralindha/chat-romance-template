import { defineComponent, ref, onMounted, onBeforeUnmount } from 'vue';
import VarButton from '../button';
import VarIcon from '../icon';
import { props } from './props';
import { isString, easeInOutCubic, throttle, toNumber } from '../utils/shared';
import { getScrollTop, getScrollLeft, scrollTo } from '../utils/elements';
import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, withModifiers as _withModifiers, normalizeClass as _normalizeClass, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_button = _resolveComponent("var-button");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-back-top", [_ctx.show ? 'var-back-top--active' : null]]),
    onClick: _cache[0] || (_cache[0] = _withModifiers((...args) => _ctx.click && _ctx.click(...args), ["stop"]))
  }, [_renderSlot(_ctx.$slots, "default", {}, () => [_createVNode(_component_var_button, {
    type: "primary",
    round: "",
    "var-back-top-cover": ""
  }, {
    default: _withCtx(() => [_createVNode(_component_var_icon, {
      name: "chevron-up"
    })]),
    _: 1
    /* STABLE */

  })])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarBackTop',
  components: {
    VarButton,
    VarIcon
  },
  props,

  setup(props) {
    var element;
    var show = ref(false);

    var click = () => {
      props.onClick == null ? void 0 : props.onClick();
      var left = getScrollLeft(element);
      scrollTo(element, {
        left,
        duration: props.duration,
        animation: easeInOutCubic
      });
    };

    var scroll = () => {
      show.value = getScrollTop(element) >= toNumber(props.visibilityHeight);
    };

    var throttleScroll = throttle(scroll, 200);

    var getHTMLElement = () => {
      if (!isString(props.target)) throw Error('[Varlet] BackTop: type of prop "target" should be a string');
      var el = document.querySelector(props.target);
      if (!el) throw Error('[Varlet] BackTop: "target" should be a selector');
      return el;
    };

    onMounted(() => {
      element = props.target ? getHTMLElement() : window;
      element.addEventListener('scroll', throttleScroll);
    });
    onBeforeUnmount(() => {
      element.removeEventListener('scroll', throttleScroll);
    });
    return {
      show,
      click
    };
  }

});