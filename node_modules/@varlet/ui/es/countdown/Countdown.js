import { defineComponent, ref, watch } from 'vue';
import { props } from './props';
import { requestAnimationFrame, cancelAnimationFrame } from '../utils/elements';
import { toNumber, parseFormat } from '../utils/shared';
var SECOND = 1000;
var MINUTE = 60 * SECOND;
var HOUR = 60 * MINUTE;
var DAY = 24 * HOUR;
import { normalizeProps as _normalizeProps, guardReactiveProps as _guardReactiveProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-countdown"
};
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", _hoisted_1, [_renderSlot(_ctx.$slots, "default", _normalizeProps(_guardReactiveProps(_ctx.timeData)), () => [_createTextVNode(_toDisplayString(_ctx.showTime), 1
  /* TEXT */
  )])]);
}
export default defineComponent({
  render,
  name: 'VarCountdown',
  props,

  setup(props) {
    var endTime = ref(0);
    var isStart = ref(false);
    var showTime = ref('');
    var handle = ref(0);
    var pauseTime = ref(0);
    var timeData = ref({});

    var formatTime = durationTime => {
      var days = Math.floor(durationTime / DAY);
      var hours = Math.floor(durationTime % DAY / HOUR);
      var minutes = Math.floor(durationTime % HOUR / MINUTE);
      var seconds = Math.floor(durationTime % MINUTE / SECOND);
      var milliseconds = Math.floor(durationTime % SECOND);
      var time = {
        days,
        hours,
        minutes,
        seconds,
        milliseconds
      };
      timeData.value = time;
      props.onChange == null ? void 0 : props.onChange(timeData.value);
      showTime.value = parseFormat(props.format, time);
    };

    var countdown = () => {
      var {
        time,
        onEnd,
        autoStart
      } = props;
      var now = Date.now();
      if (!endTime.value) endTime.value = now + toNumber(time);
      var durationTime = endTime.value - now;
      if (durationTime < 0) durationTime = 0;
      pauseTime.value = durationTime;
      formatTime(durationTime);

      if (durationTime === 0) {
        onEnd == null ? void 0 : onEnd();
        return;
      }

      if (autoStart || isStart.value) handle.value = requestAnimationFrame(countdown);
    }; // expose


    var start = () => {
      if (isStart.value) return;
      isStart.value = true;
      endTime.value = Date.now() + (pauseTime.value || toNumber(props.time));
      countdown();
    }; // expose


    var pause = () => {
      isStart.value = false;
    }; // expose


    var reset = () => {
      endTime.value = 0;
      isStart.value = false;
      cancelAnimationFrame(handle.value);
      countdown();
    };

    watch(() => props.time, () => reset(), {
      immediate: true
    });
    return {
      showTime,
      timeData,
      start,
      pause,
      reset
    };
  }

});