import { defineComponent, ref, computed, reactive, watch } from 'vue';
import dayjs from 'dayjs/esm';
import MonthPickerPanel from './src/month-picker-panel.js'
import YearPickerPanel from './src/year-picker-panel.js'
import DayPickerPanel from './src/day-picker-panel.js'
import { props, MONTH_LIST, WEEK_HEADER } from './props';
import { isArray, toNumber } from '../utils/shared';
import { pack } from '../locale';
import { renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeProps as _normalizeProps, mergeProps as _mergeProps, Transition as _Transition, withCtx as _withCtx, createVNode as _createVNode, normalizeStyle as _normalizeStyle, resolveComponent as _resolveComponent, createBlock as _createBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-date-picker-body"
};
export function render(_ctx, _cache) {
  var _component_year_picker_panel = _resolveComponent("year-picker-panel");

  var _component_month_picker_panel = _resolveComponent("month-picker-panel");

  var _component_day_picker_panel = _resolveComponent("day-picker-panel");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-date-picker", [_ctx.shadow ? 'var-elevation--2' : null]])
  }, [_createElementVNode("div", {
    class: "var-date-picker-title",
    style: _normalizeStyle({
      background: _ctx.headerColor || _ctx.color
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-date-picker-title__year", [_ctx.isYearPanel ? 'var-date-picker-title__year--active' : null]]),
    onClick: _cache[0] || (_cache[0] = $event => _ctx.clickEl('year'))
  }, [_renderSlot(_ctx.$slots, "year", {
    year: _ctx.previewYear
  }, () => [_createTextVNode(_toDisplayString(_ctx.previewYear), 1
  /* TEXT */
  )])], 2
  /* CLASS */
  ), _createElementVNode("div", {
    class: _normalizeClass(["var-date-picker-title__date", [!_ctx.isYearPanel ? 'var-date-picker-title__date--active' : null, _ctx.range ? 'var-date-picker-title__date--range' : null]]),
    onClick: _cache[1] || (_cache[1] = $event => _ctx.clickEl('date'))
  }, [_createVNode(_Transition, {
    name: _ctx.multiple ? '' : _ctx.reverse ? 'var-date-picker-reverse-translatey' : 'var-date-picker-translatey'
  }, {
    default: _withCtx(() => {
      var _ctx$chooseMonth, _ctx$chooseMonth2, _ctx$chooseMonth3;

      return [_ctx.type === 'month' ? (_openBlock(), _createElementBlock("div", {
        key: _ctx.chooseYear + ((_ctx$chooseMonth = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth.index)
      }, [_ctx.range ? _renderSlot(_ctx.$slots, "range", {
        key: 0,
        choose: _ctx.getChoose.chooseRangeMonth
      }, () => [_createTextVNode(_toDisplayString(_ctx.getMonthTitle), 1
      /* TEXT */
      )]) : _ctx.multiple ? _renderSlot(_ctx.$slots, "multiple", {
        key: 1,
        choose: _ctx.getChoose.chooseMonths
      }, () => [_createTextVNode(_toDisplayString(_ctx.getMonthTitle), 1
      /* TEXT */
      )]) : _renderSlot(_ctx.$slots, "month", {
        key: 2,
        month: (_ctx$chooseMonth2 = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth2.index,
        year: _ctx.chooseYear
      }, () => [_createTextVNode(_toDisplayString(_ctx.getMonthTitle), 1
      /* TEXT */
      )])])) : (_openBlock(), _createElementBlock("div", {
        key: _ctx.chooseYear + ((_ctx$chooseMonth3 = _ctx.chooseMonth) == null ? void 0 : _ctx$chooseMonth3.index) + _ctx.chooseDay
      }, [_ctx.range ? _renderSlot(_ctx.$slots, "range", {
        key: 0,
        choose: _ctx.formatRange
      }, () => [_createTextVNode(_toDisplayString(_ctx.getDateTitle), 1
      /* TEXT */
      )]) : _ctx.multiple ? _renderSlot(_ctx.$slots, "multiple", {
        key: 1,
        choose: _ctx.getChoose.chooseDays
      }, () => [_createTextVNode(_toDisplayString(_ctx.getDateTitle), 1
      /* TEXT */
      )]) : _renderSlot(_ctx.$slots, "date", _normalizeProps(_mergeProps({
        key: 2
      }, _ctx.slotProps)), () => [_createTextVNode(_toDisplayString(_ctx.getDateTitle), 1
      /* TEXT */
      )])]))];
    }),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["name"])], 2
  /* CLASS */
  )], 4
  /* STYLE */
  ), _createElementVNode("div", _hoisted_1, [_createVNode(_Transition, {
    name: "var-date-picker-panel-fade"
  }, {
    default: _withCtx(() => [_ctx.isYearPanel ? (_openBlock(), _createBlock(_component_year_picker_panel, {
      key: 0,
      "component-props": _ctx.componentProps,
      preview: _ctx.previewYear,
      onChooseYear: _ctx.getChooseYear
    }, null, 8
    /* PROPS */
    , ["component-props", "preview", "onChooseYear"])) : !_ctx.isYearPanel && _ctx.type === 'month' || _ctx.isMonthPanel ? (_openBlock(), _createBlock(_component_month_picker_panel, {
      key: 1,
      current: _ctx.currentDate,
      choose: _ctx.getChoose,
      preview: _ctx.getPreview,
      "click-year": () => _ctx.clickEl('year'),
      "component-props": _ctx.componentProps,
      onChooseMonth: _ctx.getChooseMonth,
      onCheckPreview: _ctx.checkPreview
    }, null, 8
    /* PROPS */
    , ["current", "choose", "preview", "click-year", "component-props", "onChooseMonth", "onCheckPreview"])) : !_ctx.isYearPanel && !_ctx.isMonthPanel && _ctx.type === 'date' ? (_openBlock(), _createBlock(_component_day_picker_panel, {
      key: 2,
      current: _ctx.currentDate,
      choose: _ctx.getChoose,
      preview: _ctx.getPreview,
      "component-props": _ctx.componentProps,
      "click-month": () => _ctx.clickEl('month'),
      onChooseDay: _ctx.getChooseDay,
      onCheckPreview: _ctx.checkPreview
    }, null, 8
    /* PROPS */
    , ["current", "choose", "preview", "component-props", "click-month", "onChooseDay", "onCheckPreview"])) : _createCommentVNode("v-if", true)]),
    _: 1
    /* STABLE */

  })])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarDatePicker',
  components: {
    MonthPickerPanel,
    YearPickerPanel,
    DayPickerPanel
  },
  props,

  setup(props) {
    var currentDate = dayjs().format('YYYY-MM-D');
    var [currentYear, currentMonth, currentDay] = currentDate.split('-');
    var monthDes = MONTH_LIST.find(month => month.index === currentMonth);
    var isYearPanel = ref(false);
    var isMonthPanel = ref(false);
    var rangeDone = ref(true);
    var chooseMonth = ref(monthDes);
    var chooseYear = ref(currentYear);
    var chooseDay = ref(currentDay);
    var previewMonth = ref(monthDes);
    var previewYear = ref(currentYear);
    var reverse = ref(false);
    var chooseMonths = ref([currentYear + "-" + currentMonth]);
    var chooseDays = ref([currentDate]);
    var chooseRangeMonth = ref([currentYear + "-" + currentMonth]);
    var chooseRangeDay = ref([currentDate]);
    var componentProps = reactive({
      allowedDates: props.allowedDates,
      type: props.type,
      color: props.color,
      firstDayOfWeek: props.firstDayOfWeek,
      min: props.min,
      max: props.max,
      showCurrent: props.showCurrent,
      multiple: props.multiple,
      range: props.range
    });
    var getChoose = computed(() => ({
      chooseMonth: chooseMonth.value,
      chooseYear: chooseYear.value,
      chooseDay: chooseDay.value,
      chooseMonths: chooseMonths.value,
      chooseDays: chooseDays.value,
      chooseRangeMonth: chooseRangeMonth.value,
      chooseRangeDay: chooseRangeDay.value
    }));
    var getPreview = computed(() => ({
      previewMonth: previewMonth.value,
      previewYear: previewYear.value
    }));
    var getMonthTitle = computed(() => {
      var _pack$value$datePicke, _pack$value$datePicke2;

      var {
        multiple,
        range
      } = props;
      if (range) return chooseRangeMonth.value[0] + " ~ " + chooseRangeMonth.value[1];
      var monthName = (_pack$value$datePicke = (_pack$value$datePicke2 = pack.value.datePickerMonthDict) == null ? void 0 : _pack$value$datePicke2[chooseMonth.value.index].name) != null ? _pack$value$datePicke : '';
      return multiple ? "" + chooseMonths.value.length + pack.value.datePickerSelected : monthName;
    });
    var getDateTitle = computed(() => {
      var _pack$value$datePicke3, _pack$value$datePicke4, _pack$value$datePicke5, _pack$value$datePicke6;

      var {
        multiple,
        range
      } = props;

      if (range) {
        chooseRangeDay.value = chooseRangeDay.value.map(date => dayjs(date).format('YYYY-MM-DD'));
        return chooseRangeDay.value[0] + " ~ " + chooseRangeDay.value[1];
      }

      if (multiple) return "" + chooseDays.value.length + pack.value.datePickerSelected;
      var weekIndex = dayjs(chooseYear.value + "-" + chooseMonth.value.index + "-" + chooseDay.value).day();
      var week = WEEK_HEADER.find(value => value.index === "" + weekIndex);
      var weekName = (_pack$value$datePicke3 = (_pack$value$datePicke4 = pack.value.datePickerWeekDict) == null ? void 0 : _pack$value$datePicke4[week.index].name) != null ? _pack$value$datePicke3 : '';
      var monthName = (_pack$value$datePicke5 = (_pack$value$datePicke6 = pack.value.datePickerMonthDict) == null ? void 0 : _pack$value$datePicke6[chooseMonth.value.index].name) != null ? _pack$value$datePicke5 : '';
      var showDay = chooseDay.value.padStart(2, '0');
      if (pack.value.lang === 'zh-CN') return chooseMonth.value.index + "-" + showDay + " " + weekName.slice(0, 3);
      return weekName.slice(0, 3) + ", " + monthName.slice(0, 3) + " " + chooseDay.value;
    });
    var slotProps = computed(() => {
      var weekIndex = dayjs(chooseYear.value + "-" + chooseMonth.value.index + "-" + chooseDay.value).day();
      return {
        week: "" + weekIndex,
        year: chooseYear.value,
        month: chooseMonth.value.index,
        date: chooseDay.value
      };
    });
    var formatRange = computed(() => getChoose.value.chooseRangeDay.map(choose => dayjs(choose).format('YYYY-MM-DD')));
    var isSameYear = computed(() => chooseYear.value === previewYear.value);
    var isSameMonth = computed(() => chooseMonth.value.index === previewMonth.value.index);

    var clickEl = type => {
      if (type === 'year') isYearPanel.value = true;else if (type === 'month') isMonthPanel.value = true;else {
        isYearPanel.value = false;
        isMonthPanel.value = false;
      }
    };

    var updateRange = (date, type) => {
      var rangeDate = type === 'month' ? chooseRangeMonth : chooseRangeDay;
      rangeDate.value = rangeDone.value ? [date, date] : [rangeDate.value[0], date];
      rangeDone.value = !rangeDone.value;

      if (rangeDone.value) {
        var _props$onUpdateModel;

        var isChangeOrder = dayjs(rangeDate.value[0]).isAfter(rangeDate.value[1]);

        var _date = isChangeOrder ? [rangeDate.value[1], rangeDate.value[0]] : [...rangeDate.value];

        (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, _date);
        props.onChange == null ? void 0 : props.onChange(_date);
      }
    };

    var updateMultiple = (date, type) => {
      var _props$onUpdateModel2;

      var multipleDates = type === 'month' ? chooseMonths : chooseDays;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-DD';
      var formatDates = multipleDates.value.map(date => dayjs(date).format(formatType));
      var index = formatDates.findIndex(choose => choose === date);
      if (index === -1) formatDates.push(date);else formatDates.splice(index, 1);
      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, formatDates);
      props.onChange == null ? void 0 : props.onChange(formatDates);
    };

    var getReverse = (dateType, date) => {
      if (!isSameYear.value) return chooseYear.value > previewYear.value;
      if (dateType === 'month') return date.index < chooseMonth.value.index;
      return isSameMonth.value ? date < toNumber(chooseDay.value) : chooseMonth.value.index > previewMonth.value.index;
    };

    var getChooseDay = day => {
      var {
        readonly,
        range,
        multiple,
        onChange,
        'onUpdate:modelValue': updateModelValue
      } = props;
      if (day < 0 || readonly) return;
      reverse.value = getReverse('day', day);
      var date = previewYear.value + "-" + previewMonth.value.index + "-" + day;
      var formatDate = dayjs(date).format('YYYY-MM-DD');
      if (range) updateRange(formatDate, 'day');else if (multiple) updateMultiple(formatDate, 'day');else {
        updateModelValue == null ? void 0 : updateModelValue(formatDate);
        onChange == null ? void 0 : onChange(formatDate);
      }
    };

    var getChooseMonth = month => {
      var {
        type,
        readonly,
        range,
        multiple,
        onChange,
        'onUpdate:modelValue': updateModelValue
      } = props;
      reverse.value = getReverse('month', month);

      if (type === 'month' && !readonly) {
        var date = previewYear.value + "-" + month.index;
        if (range) updateRange(date, 'month');else if (multiple) updateMultiple(date, 'month');else {
          updateModelValue == null ? void 0 : updateModelValue(date);
          onChange == null ? void 0 : onChange(date);
        }
      } else {
        previewMonth.value = month;
      }

      isMonthPanel.value = false;
    };

    var getChooseYear = year => {
      previewYear.value = "" + year;
      isYearPanel.value = false;
      isMonthPanel.value = true;
    };

    var checkPreview = (type, checkType) => {
      var changeValue = checkType === 'prev' ? -1 : 1;

      if (type === 'year') {
        previewYear.value = "" + (toNumber(previewYear.value) + changeValue);
      } else {
        var checkIndex = toNumber(previewMonth.value.index) + changeValue;

        if (checkIndex < 1) {
          previewYear.value = "" + (toNumber(previewYear.value) - 1);
          checkIndex = 12;
        }

        if (checkIndex > 12) {
          previewYear.value = "" + (toNumber(previewYear.value) + 1);
          checkIndex = 1;
        }

        previewMonth.value = MONTH_LIST.find(month => toNumber(month.index) === checkIndex);
      }
    };

    var checkValue = () => {
      if ((props.multiple || props.range) && !isArray(props.modelValue)) {
        console.error('[Varlet] DatePicker: type of prop "modelValue" should be an Array');
        return false;
      }

      if (!props.multiple && !props.range && isArray(props.modelValue)) {
        console.error('[Varlet] DatePicker: type of prop "modelValue" should be a String');
        return false;
      }

      return true;
    };

    var invalidFormatDate = date => {
      if (isArray(date)) return false;

      if (date === undefined || date === 'Invalid Date') {
        console.error('[Varlet] DatePicker: "modelValue" is an Invalid Date');
        return true;
      }

      return false;
    };

    var rangeInit = (value, type) => {
      var rangeDate = type === 'month' ? chooseRangeMonth : chooseRangeDay;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-D';
      var formatDateList = value.map(choose => dayjs(choose).format(formatType)).slice(0, 2);
      var isValid = rangeDate.value.some(date => invalidFormatDate(date));
      if (isValid) return;
      rangeDate.value = formatDateList;
      var isChangeOrder = dayjs(rangeDate.value[0]).isAfter(rangeDate.value[1]);

      if (rangeDate.value.length === 2 && isChangeOrder) {
        rangeDate.value = [rangeDate.value[1], rangeDate.value[0]];
      }
    };

    var multipleInit = (value, type) => {
      var rangeDate = type === 'month' ? chooseMonths : chooseDays;
      var formatType = type === 'month' ? 'YYYY-MM' : 'YYYY-MM-D'; // 需要去重

      var formatDateList = Array.from(new Set(value.map(choose => dayjs(choose).format(formatType))));
      rangeDate.value = formatDateList.filter(date => date !== 'Invalid Date');
    };

    var dateInit = value => {
      var formatDate = dayjs(value).format('YYYY-MM-D');
      if (invalidFormatDate(formatDate)) return;
      var [yearValue, monthValue, dayValue] = formatDate.split('-');
      var monthDes = MONTH_LIST.find(month => month.index === monthValue);
      chooseMonth.value = monthDes;
      chooseYear.value = yearValue;
      chooseDay.value = dayValue;
      previewMonth.value = monthDes;
      previewYear.value = yearValue;
    };

    watch(() => props.modelValue, value => {
      if (!checkValue() || invalidFormatDate(value)) return;

      if (props.range) {
        if (!isArray(value)) return;
        rangeDone.value = value.length !== 1;
        rangeInit(value, props.type);
      } else if (props.multiple) {
        if (!isArray(value)) return;
        multipleInit(value, props.type);
      } else {
        dateInit(value);
      }
    }, {
      immediate: true
    });
    return {
      reverse,
      currentDate,
      chooseMonth,
      chooseYear,
      chooseDay,
      previewYear,
      isYearPanel,
      isMonthPanel,
      getMonthTitle,
      getDateTitle,
      getChoose,
      getPreview,
      componentProps,
      slotProps,
      formatRange,
      clickEl,
      getChooseDay,
      getChooseMonth,
      getChooseYear,
      checkPreview
    };
  }

});