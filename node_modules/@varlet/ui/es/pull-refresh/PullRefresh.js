import VarIcon from '../icon';
import { defineComponent, ref, computed, watch, onMounted } from 'vue';
import { getParentScroller, getScrollTop } from '../utils/elements';
import { props } from './props';
import { toNumber } from '../utils/shared';
var MAX_DISTANCE = 100;
var CONTROL_POSITION = -50;
var scroller;
import { resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderSlot as _renderSlot, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  return _openBlock(), _createElementBlock("div", {
    ref: "freshNode",
    class: "var-pull-refresh",
    onTouchstart: _cache[0] || (_cache[0] = (...args) => _ctx.touchStart && _ctx.touchStart(...args)),
    onTouchmove: _cache[1] || (_cache[1] = (...args) => _ctx.touchMove && _ctx.touchMove(...args)),
    onTouchend: _cache[2] || (_cache[2] = (...args) => _ctx.touchEnd && _ctx.touchEnd(...args)),
    onTouchcancel: _cache[3] || (_cache[3] = (...args) => _ctx.touchEnd && _ctx.touchEnd(...args))
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-pull-refresh__control var-elevation--2", [_ctx.isSuccess ? 'var-pull-refresh__control-success' : null]]),
    style: _normalizeStyle(_ctx.controlStyle)
  }, [_createVNode(_component_var_icon, {
    name: _ctx.iconName,
    transition: 200,
    class: _normalizeClass(_ctx.iconClass),
    "var-pull-refresh-cover": ""
  }, null, 8
  /* PROPS */
  , ["name", "class"])], 6
  /* CLASS, STYLE */
  ), _renderSlot(_ctx.$slots, "default")], 544
  /* HYDRATE_EVENTS, NEED_PATCH */
  );
}
export default defineComponent({
  render,
  name: 'VarPullRefresh',
  components: {
    VarIcon
  },
  props,

  setup(props) {
    var freshNode = ref(null);
    var startPosition = ref(0);
    var distance = ref(CONTROL_POSITION);
    var iconName = ref('arrow-down');
    var refreshStatus = ref('default');
    var isEnd = ref(false);
    var isTouchable = computed(() => refreshStatus.value !== 'loading' && refreshStatus.value !== 'success' && !props.disabled);
    var iconClass = computed(() => ({
      'var-pull-refresh__icon': true,
      'var-pull-refresh__animation': refreshStatus.value === 'loading'
    }));
    var controlStyle = computed(() => ({
      transform: "translate3d(0px, " + distance.value + "px, 0px) translate(-50%, 0)",
      transition: isEnd.value ? "transform " + props.animationDuration + "ms" : undefined,
      background: props.successBgColor || props.bgColor,
      color: props.successColor || props.color
    }));
    var isSuccess = computed(() => refreshStatus.value === 'success');

    var touchStart = event => {
      if (!isTouchable.value) return;
      refreshStatus.value = 'pulling';
      startPosition.value = event.touches[0].clientY;
    };

    var touchMove = event => {
      var scrollTop = getScrollTop(scroller);
      if (scrollTop > 0 || !isTouchable.value) return;
      if (scrollTop === 0 && distance.value > CONTROL_POSITION) event.cancelable && event.preventDefault();
      var moveDistance = (event.touches[0].clientY - startPosition.value) / 2 + CONTROL_POSITION;
      distance.value = moveDistance >= MAX_DISTANCE ? MAX_DISTANCE : moveDistance;
      iconName.value = distance.value >= MAX_DISTANCE * 0.2 ? 'refresh' : 'arrow-down';
    };

    var touchEnd = () => {
      if (!isTouchable.value) return;
      isEnd.value = true;

      if (distance.value >= MAX_DISTANCE * 0.2) {
        var _props$onUpdateModel;

        refreshStatus.value = 'loading';
        distance.value = MAX_DISTANCE * 0.3;
        (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, true);
        props.onRefresh == null ? void 0 : props.onRefresh();
      } else {
        refreshStatus.value = 'loosing';
        iconName.value = 'arrow-down';
        distance.value = CONTROL_POSITION;
        setTimeout(() => {
          isEnd.value = false;
        }, toNumber(props.animationDuration));
      }
    };

    var reset = () => {
      setTimeout(() => {
        refreshStatus.value = 'default';
        iconName.value = 'arrow-down';
        isEnd.value = false;
      }, toNumber(props.animationDuration));
    };

    watch(() => props.modelValue, newValue => {
      if (newValue === false) {
        isEnd.value = true;
        refreshStatus.value = 'success';
        iconName.value = 'checkbox-marked-circle';
        setTimeout(() => {
          distance.value = CONTROL_POSITION;
          reset();
        }, toNumber(props.successDuration));
      }
    });
    onMounted(() => {
      scroller = getParentScroller(freshNode.value);
    });
    return {
      freshNode,
      touchStart,
      touchMove,
      touchEnd,
      iconName,
      iconClass,
      controlStyle,
      isSuccess
    };
  }

});