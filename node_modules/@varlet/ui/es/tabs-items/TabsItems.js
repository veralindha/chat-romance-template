import VarSwipe from '../swipe';
import { defineComponent, watch, ref } from 'vue';
import { useTabItem } from './provide';
import { props } from './props';
import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from "vue";
export function render(_ctx, _cache) {
  var _component_var_swipe = _resolveComponent("var-swipe");

  return _openBlock(), _createBlock(_component_var_swipe, {
    class: "var-tabs-items",
    ref: "swipe",
    loop: _ctx.loop,
    touchable: _ctx.canSwipe,
    indicator: false,
    onChange: _ctx.handleSwipeChange
  }, {
    default: _withCtx(() => [_renderSlot(_ctx.$slots, "default")]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["loop", "touchable", "onChange"]);
}
export default defineComponent({
  render,
  name: 'VarTabsItems',
  components: {
    VarSwipe
  },
  props,

  setup(props) {
    var swipe = ref(null);
    var {
      tabItemList,
      bindTabItem,
      length
    } = useTabItem();

    var matchName = active => {
      return tabItemList.find(({
        name
      }) => active === name.value);
    };

    var matchIndex = active => {
      return tabItemList.find(({
        index
      }) => active === index.value);
    };

    var matchActive = active => {
      return matchName(active) || matchIndex(active);
    };

    var handleActiveChange = newValue => {
      var _swipe$value;

      var newActiveTabItemProvider = matchActive(newValue);

      if (!newActiveTabItemProvider) {
        return;
      }

      tabItemList.forEach(({
        setCurrent
      }) => setCurrent(false));
      newActiveTabItemProvider.setCurrent(true);
      (_swipe$value = swipe.value) == null ? void 0 : _swipe$value.to(newActiveTabItemProvider.index.value);
    };

    var handleSwipeChange = currentIndex => {
      var _tabItem$name$value, _props$onUpdateActiv;

      var tabItem = tabItemList.find(({
        index
      }) => index.value === currentIndex);
      var active = (_tabItem$name$value = tabItem.name.value) != null ? _tabItem$name$value : tabItem.index.value;
      (_props$onUpdateActiv = props['onUpdate:active']) == null ? void 0 : _props$onUpdateActiv.call(props, active);
    };

    var tabsItemsProvider = {};
    bindTabItem(tabsItemsProvider);
    watch(() => props.active, handleActiveChange);
    watch(() => length.value, () => handleActiveChange(props.active));
    return {
      swipe,
      handleSwipeChange
    };
  }

});