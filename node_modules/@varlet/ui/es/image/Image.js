import Ripple from '../ripple';
import Lazy from '../lazy';
import { defineComponent } from 'vue';
import { props } from './props';
import { toSizeUnit } from '../utils/elements';
import { normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = ["alt", "lazy-error", "lazy-loading"];
var _hoisted_2 = ["alt", "src"];
export function render(_ctx, _cache) {
  var _directive_lazy = _resolveDirective("lazy");

  var _directive_ripple = _resolveDirective("ripple");

  return _withDirectives((_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-image var--box", [!_ctx.block ? 'var--inline-block' : null]]),
    style: _normalizeStyle({
      width: _ctx.toSizeUnit(_ctx.width),
      height: _ctx.toSizeUnit(_ctx.height),
      'border-radius': _ctx.toSizeUnit(_ctx.radius)
    })
  }, [_ctx.lazy ? _withDirectives((_openBlock(), _createElementBlock("img", {
    key: 0,
    class: "var-image__image",
    alt: _ctx.alt,
    "lazy-error": _ctx.error,
    "lazy-loading": _ctx.loading,
    style: _normalizeStyle({
      objectFit: _ctx.fit
    }),
    onLoad: _cache[0] || (_cache[0] = (...args) => _ctx.handleLoad && _ctx.handleLoad(...args)),
    onError: _cache[1] || (_cache[1] = (...args) => _ctx.handleError && _ctx.handleError(...args)),
    onClick: _cache[2] || (_cache[2] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, null, 44
  /* STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1)), [[_directive_lazy, _ctx.src]]) : (_openBlock(), _createElementBlock("img", {
    key: 1,
    class: "var-image__image",
    alt: _ctx.alt,
    style: _normalizeStyle({
      objectFit: _ctx.fit
    }),
    src: _ctx.src,
    onLoad: _cache[3] || (_cache[3] = (...args) => _ctx.handleLoad && _ctx.handleLoad(...args)),
    onError: _cache[4] || (_cache[4] = (...args) => _ctx.handleError && _ctx.handleError(...args)),
    onClick: _cache[5] || (_cache[5] = (...args) => _ctx.onClick && _ctx.onClick(...args))
  }, null, 44
  /* STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_2))], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple, {
    disabled: !_ctx.ripple
  }]]);
}
export default defineComponent({
  render,
  name: 'VarImage',
  directives: {
    Lazy,
    Ripple
  },
  props,

  setup(props) {
    var handleLoad = e => {
      var el = e.currentTarget;
      var {
        lazy,
        onLoad,
        onError
      } = props;

      if (lazy) {
        el._lazy.state === 'success' && (onLoad == null ? void 0 : onLoad(e));
        el._lazy.state === 'error' && (onError == null ? void 0 : onError(e));
      } else {
        onLoad == null ? void 0 : onLoad(e);
      }
    };

    var handleError = e => {
      var {
        lazy,
        onError
      } = props;
      !lazy && (onError == null ? void 0 : onError(e));
    };

    return {
      toSizeUnit,
      handleLoad,
      handleError
    };
  }

});