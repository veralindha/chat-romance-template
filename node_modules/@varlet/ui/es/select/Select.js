import VarIcon from '../icon';
import VarMenu from '../menu';
import VarChip from '../chip';
import VarFormDetails from '../form-details';
import { computed, defineComponent, ref, watch, nextTick } from 'vue';
import { isArray, isEmpty } from '../utils/shared';
import { props } from './props';
import { useValidation } from '../utils/components';
import { useOptions } from './provide';
import { useForm } from '../form/provide';
import { toPxNum } from '../utils/elements';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withModifiers as _withModifiers, withCtx as _withCtx, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createVNode as _createVNode, normalizeStyle as _normalizeStyle, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  key: 0
};
var _hoisted_2 = {
  key: 0,
  class: "var-select__chips"
};
var _hoisted_3 = {
  key: 1,
  class: "var-select__values"
};
var _hoisted_4 = {
  key: 1
};
var _hoisted_5 = {
  class: "var-select__scroller"
};
export function render(_ctx, _cache) {
  var _component_var_chip = _resolveComponent("var-chip");

  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_menu = _resolveComponent("var-menu");

  var _component_var_form_details = _resolveComponent("var-form-details");

  return _openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-select var--box", [_ctx.formDisabled || _ctx.disabled ? 'var-select--disabled' : null]]),
    onClick: _cache[3] || (_cache[3] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-select__controller", [_ctx.isFocus ? 'var-select--focus' : null, _ctx.errorMessage ? 'var-select--error' : null, _ctx.formDisabled || _ctx.disabled ? 'var-select--disabled' : null]]),
    style: _normalizeStyle({
      color: !_ctx.errorMessage ? _ctx.isFocus ? _ctx.focusColor : _ctx.blurColor : undefined
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-select__icon", [!_ctx.hint ? 'var-select--non-hint' : null]])
  }, [_renderSlot(_ctx.$slots, "prepend-icon")], 2
  /* CLASS */
  ), _createVNode(_component_var_menu, {
    class: "var-select__menu",
    "var-select-cover": "",
    "offset-y": _ctx.offsetY,
    show: _ctx.isFocus,
    "onUpdate:show": _cache[2] || (_cache[2] = $event => _ctx.isFocus = $event),
    onClose: _ctx.handleBlur
  }, {
    menu: _withCtx(() => [_createElementVNode("div", _hoisted_5, [_renderSlot(_ctx.$slots, "default")])]),
    default: _withCtx(() => [_createElementVNode("div", {
      class: _normalizeClass(["var-select__wrap", [!_ctx.hint ? 'var-select--non-hint' : null]]),
      ref: "wrapEl",
      onClick: _cache[1] || (_cache[1] = (...args) => _ctx.handleFocus && _ctx.handleFocus(...args))
    }, [_createElementVNode("div", {
      class: _normalizeClass(["var-select__select", [_ctx.errorMessage ? 'var-select--error' : null, _ctx.formDisabled || _ctx.disabled ? 'var-select--disabled' : null]]),
      style: _normalizeStyle({
        textAlign: _ctx.textAlign,
        color: _ctx.textColor
      })
    }, [_ctx.multiple ? (_openBlock(), _createElementBlock("div", _hoisted_1, [_ctx.chip ? (_openBlock(), _createElementBlock("div", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.labels, l => {
      return _openBlock(), _createBlock(_component_var_chip, {
        class: "var-select__chip",
        "var-select-cover": "",
        closable: "",
        size: "small",
        type: _ctx.errorMessage ? 'danger' : undefined,
        key: l,
        onClick: _cache[0] || (_cache[0] = _withModifiers(() => {}, ["stop"])),
        onClose: e => _ctx.handleClose(l)
      }, {
        default: _withCtx(() => [_createTextVNode(_toDisplayString(l), 1
        /* TEXT */
        )]),
        _: 2
        /* DYNAMIC */

      }, 1032
      /* PROPS, DYNAMIC_SLOTS */
      , ["type", "onClose"]);
    }), 128
    /* KEYED_FRAGMENT */
    ))])) : (_openBlock(), _createElementBlock("div", _hoisted_3, _toDisplayString(_ctx.labels.join(_ctx.separator)), 1
    /* TEXT */
    ))])) : (_openBlock(), _createElementBlock("span", _hoisted_4, _toDisplayString(_ctx.label), 1
    /* TEXT */
    )), _createVNode(_component_var_icon, {
      class: _normalizeClass(["var-select__arrow", [_ctx.isFocus ? 'var-select--arrow-rotate' : null]]),
      "var-select-cover": "",
      name: "menu-down",
      transition: 300
    }, null, 8
    /* PROPS */
    , ["class"])], 6
    /* CLASS, STYLE */
    ), _createElementVNode("label", {
      class: _normalizeClass(["var-select__placeholder var--ellipsis", [_ctx.formDisabled || _ctx.disabled ? 'var-select--disabled' : null, _ctx.computePlaceholderState(), !_ctx.hint ? 'var-select--placeholder-non-hint' : null]])
    }, _toDisplayString(_ctx.placeholder), 3
    /* TEXT, CLASS */
    )], 2
    /* CLASS */
    )]),
    _: 3
    /* FORWARDED */

  }, 8
  /* PROPS */
  , ["offset-y", "show", "onClose"]), _createElementVNode("div", {
    class: _normalizeClass(["var-select__icon", [!_ctx.hint ? 'var-select--non-hint' : null]])
  }, [_renderSlot(_ctx.$slots, "append-icon", {}, () => [_ctx.clearable ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 0,
    class: "var-select__clear-icon",
    name: "close-circle",
    size: "14px",
    onClick: _ctx.handleClear
  }, null, 8
  /* PROPS */
  , ["onClick"])) : _createCommentVNode("v-if", true)])], 2
  /* CLASS */
  )], 6
  /* CLASS, STYLE */
  ), _ctx.line ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: _normalizeClass(["var-select__line", [_ctx.formDisabled || _ctx.disabled ? 'var-select--line-disabled' : null, _ctx.errorMessage ? 'var-select--line-error' : null]]),
    style: _normalizeStyle({
      background: !_ctx.errorMessage ? _ctx.blurColor : undefined
    })
  }, [_createElementVNode("div", {
    class: _normalizeClass(["var-select__dot", [_ctx.isFocus ? 'var-select--spread' : null, _ctx.formDisabled || _ctx.disabled ? 'var-select--line-disabled' : null, _ctx.errorMessage ? 'var-select--line-error' : null]]),
    style: _normalizeStyle({
      background: !_ctx.errorMessage ? _ctx.focusColor : undefined
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 6
  /* CLASS, STYLE */
  )) : _createCommentVNode("v-if", true), _createVNode(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])], 2
  /* CLASS */
  );
}
export default defineComponent({
  render,
  name: 'VarSelect',
  components: {
    VarIcon,
    VarMenu,
    VarChip,
    VarFormDetails
  },
  props,

  setup(props) {
    var wrapEl = ref(null);
    var isFocus = ref(false);
    var multiple = computed(() => props.multiple);
    var focusColor = computed(() => props.focusColor);
    var label = ref('');
    var labels = ref([]);
    var wrapWidth = computed(() => {
      return wrapEl.value && window.getComputedStyle(wrapEl.value).width || '0px';
    });
    var offsetY = computed(() => {
      var paddingTop = wrapEl.value && window.getComputedStyle(wrapEl.value).paddingTop || '0px';
      return toPxNum(paddingTop) * 1.5;
    });
    var {
      bindForm,
      form
    } = useForm();
    var {
      length,
      options,
      bindOptions
    } = useOptions();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();

    var computeLabel = () => {
      var {
        multiple,
        modelValue
      } = props;

      if (multiple) {
        var rawModelValue = modelValue;
        labels.value = rawModelValue.map(findLabel);
      }

      if (!multiple && !isEmpty(modelValue)) {
        label.value = findLabel(modelValue);
      }

      if (!multiple && isEmpty(modelValue)) {
        label.value = '';
      }
    };

    var validateWithTrigger = trigger => {
      nextTick(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var findValueOrLabel = ({
      value,
      label
    }) => {
      if (value.value != null) {
        return value.value;
      }

      return label.value;
    };

    var findLabel = modelValue => {
      var option = options.find(({
        value
      }) => value.value === modelValue);

      if (!option) {
        option = options.find(({
          label
        }) => label.value === modelValue);
      }

      return option.label.value;
    };

    var computePlaceholderState = () => {
      var {
        hint,
        modelValue
      } = props;

      if (!hint && !isEmpty(modelValue)) {
        return 'var-select--placeholder-hidden';
      }

      if (hint && (!isEmpty(modelValue) || isFocus.value)) {
        return 'var-select--placeholder-hint';
      }
    };

    var handleFocus = () => {
      var {
        disabled,
        readonly,
        onFocus
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly) {
        return;
      }

      isFocus.value = true;
      onFocus == null ? void 0 : onFocus();
      validateWithTrigger('onFocus');
    };

    var handleBlur = () => {
      var {
        disabled,
        readonly,
        onBlur
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly) {
        return;
      }

      onBlur == null ? void 0 : onBlur();
      validateWithTrigger('onBlur');
    };

    var onSelect = option => {
      var _props$onUpdateModel;

      var {
        disabled,
        readonly,
        multiple,
        onChange
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly) {
        return;
      }

      var selectedValue = multiple ? options.filter(({
        selected
      }) => selected.value).map(findValueOrLabel) : findValueOrLabel(option);
      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, selectedValue);
      onChange == null ? void 0 : onChange(selectedValue);
      validateWithTrigger('onChange');
      !multiple && (isFocus.value = false);
    };

    var handleClear = () => {
      var _props$onUpdateModel2;

      var {
        disabled,
        readonly,
        multiple,
        clearable,
        onClear
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly || !clearable) {
        return;
      }

      var changedModelValue = multiple ? [] : undefined;
      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, changedModelValue);
      onClear == null ? void 0 : onClear(changedModelValue);
      validateWithTrigger('onClear');
    };

    var handleClick = e => {
      var {
        disabled,
        onClick
      } = props;

      if (form != null && form.disabled.value || disabled) {
        return;
      }

      onClick == null ? void 0 : onClick(e);
      validateWithTrigger('onClick');
    };

    var handleClose = text => {
      var _props$onUpdateModel3;

      var {
        disabled,
        readonly,
        modelValue,
        onClose
      } = props;

      if (form != null && form.disabled.value || form != null && form.readonly.value || disabled || readonly) {
        return;
      }

      var rawModelValue = modelValue;
      var option = options.find(({
        label
      }) => label.value === text);
      var currentModelValue = rawModelValue.filter(value => {
        var _value$value;

        return value !== ((_value$value = option.value.value) != null ? _value$value : option.label.value);
      });
      (_props$onUpdateModel3 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel3.call(props, currentModelValue);
      onClose == null ? void 0 : onClose(currentModelValue);
      validateWithTrigger('onClose');
    };

    var syncOptions = () => {
      var {
        multiple,
        modelValue
      } = props;

      if (multiple) {
        var rawModelValue = modelValue;
        options.forEach(option => option.sync(rawModelValue.includes(findValueOrLabel(option))));
      } else {
        options.forEach(option => option.sync(modelValue === findValueOrLabel(option)));
      }

      computeLabel();
    }; // expose


    var focus = () => {
      isFocus.value = true;
    }; // expose


    var blur = () => {
      isFocus.value = false;
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var reset = () => {
      var _props$onUpdateModel4;

      (_props$onUpdateModel4 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel4.call(props, props.multiple ? [] : undefined);
      resetValidation();
    };

    watch(() => props.multiple, () => {
      var {
        multiple,
        modelValue
      } = props;

      if (multiple && !isArray(modelValue)) {
        throw Error('The modelValue must be an array when multiple is true');
      }
    });
    watch(() => props.modelValue, syncOptions, {
      deep: true
    });
    watch(() => length.value, syncOptions);
    var selectProvider = {
      wrapWidth,
      multiple,
      focusColor,
      onSelect,
      reset,
      validate,
      resetValidation
    };
    bindOptions(selectProvider);
    bindForm == null ? void 0 : bindForm(selectProvider);
    return {
      wrapEl,
      offsetY,
      isFocus,
      errorMessage,
      formDisabled: form == null ? void 0 : form.disabled,
      label,
      labels,
      computePlaceholderState,
      handleFocus,
      handleBlur,
      handleClear,
      handleClick,
      handleClose,
      reset,
      validate,
      resetValidation,
      focus,
      blur
    };
  }

});