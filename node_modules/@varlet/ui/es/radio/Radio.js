import VarIcon from '../icon';
import VarFormDetails from '../form-details';
import Ripple from '../ripple';
import { computed, defineComponent, nextTick, ref, watch } from 'vue';
import { props } from './props';
import { useValidation } from '../utils/components';
import { useRadioGroup } from './provide';
import { useForm } from '../form/provide';
import { renderSlot as _renderSlot, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, createVNode as _createVNode, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, createElementVNode as _createElementVNode, withDirectives as _withDirectives, mergeProps as _mergeProps, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-radio__wrap"
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  var _component_var_form_details = _resolveComponent("var-form-details");

  var _directive_ripple = _resolveDirective("ripple");

  return _openBlock(), _createElementBlock("div", _hoisted_1, [_createElementVNode("div", _mergeProps({
    class: "var-radio",
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, _ctx.$attrs), [_withDirectives(_createElementVNode("div", {
    class: _normalizeClass(["var-radio__action", [_ctx.checked ? 'var-radio--checked' : 'var-radio--unchecked', _ctx.errorMessage || _ctx.radioGroupErrorMessage ? 'var-radio--error' : null, _ctx.formDisabled || _ctx.disabled ? 'var-radio--disabled' : null]]),
    style: _normalizeStyle({
      color: _ctx.checked ? _ctx.checkedColor : _ctx.uncheckedColor
    })
  }, [_ctx.checked ? _renderSlot(_ctx.$slots, "checked-icon", {
    key: 0
  }, () => [_createVNode(_component_var_icon, {
    class: _normalizeClass(["var-radio__icon", [_ctx.withAnimation ? 'var-radio--with-animation' : null]]),
    "var-radio-cover": "",
    name: "radio-marked",
    size: _ctx.iconSize
  }, null, 8
  /* PROPS */
  , ["class", "size"])]) : _renderSlot(_ctx.$slots, "unchecked-icon", {
    key: 1
  }, () => [_createVNode(_component_var_icon, {
    class: _normalizeClass(["var-radio__icon", [_ctx.withAnimation ? 'var-radio--with-animation' : null]]),
    "var-radio-cover": "",
    name: "radio-blank",
    size: _ctx.iconSize
  }, null, 8
  /* PROPS */
  , ["class", "size"])])], 6
  /* CLASS, STYLE */
  ), [[_directive_ripple, {
    disabled: _ctx.formReadonly || _ctx.readonly || _ctx.formDisabled || _ctx.disabled || !_ctx.ripple
  }]]), _createElementVNode("div", {
    class: _normalizeClass(["var-radio__text", [_ctx.errorMessage || _ctx.radioGroupErrorMessage ? 'var-radio--error' : null, _ctx.formDisabled || _ctx.disabled ? 'var-radio--disabled' : null]])
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 16
  /* FULL_PROPS */
  ), _createVNode(_component_var_form_details, {
    "error-message": _ctx.errorMessage
  }, null, 8
  /* PROPS */
  , ["error-message"])]);
}
export default defineComponent({
  render,
  name: 'VarRadio',
  directives: {
    Ripple
  },
  components: {
    VarIcon,
    VarFormDetails
  },
  inheritAttrs: false,
  props,

  setup(props) {
    var value = ref(false);
    var checked = computed(() => value.value === props.checkedValue);
    var withAnimation = ref(false);
    var {
      radioGroup,
      bindRadioGroup
    } = useRadioGroup();
    var {
      form,
      bindForm
    } = useForm();
    var {
      errorMessage,
      validateWithTrigger: vt,
      validate: v,
      // expose
      resetValidation
    } = useValidation();

    var validateWithTrigger = trigger => {
      nextTick(() => {
        var {
          validateTrigger,
          rules,
          modelValue
        } = props;
        vt(validateTrigger, trigger, rules, modelValue);
      });
    };

    var change = changedValue => {
      var _props$onUpdateModel;

      var {
        checkedValue,
        onChange
      } = props;

      if (radioGroup && value.value === checkedValue) {
        return;
      }

      value.value = changedValue;
      (_props$onUpdateModel = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel.call(props, value.value);
      onChange == null ? void 0 : onChange(value.value);
      radioGroup == null ? void 0 : radioGroup.onToggle(checkedValue);
      validateWithTrigger('onChange');
    };

    var handleClick = e => {
      var {
        disabled,
        readonly,
        uncheckedValue,
        checkedValue,
        onClick
      } = props;

      if (form != null && form.disabled.value || disabled) {
        return;
      }

      onClick == null ? void 0 : onClick(e);

      if (form != null && form.readonly.value || readonly) {
        return;
      }

      withAnimation.value = true;
      change(checked.value ? uncheckedValue : checkedValue);
    };

    var sync = v => {
      var {
        checkedValue,
        uncheckedValue
      } = props;
      value.value = v === checkedValue ? checkedValue : uncheckedValue;
    }; // expose


    var reset = () => {
      var _props$onUpdateModel2;

      (_props$onUpdateModel2 = props['onUpdate:modelValue']) == null ? void 0 : _props$onUpdateModel2.call(props, props.uncheckedValue);
      resetValidation();
    }; // expose


    var validate = () => v(props.rules, props.modelValue); // expose


    var toggle = changedValue => {
      var {
        uncheckedValue,
        checkedValue
      } = props;
      var shouldReverse = ![uncheckedValue, checkedValue].includes(changedValue);

      if (shouldReverse) {
        changedValue = checked.value ? uncheckedValue : checkedValue;
      }

      change(changedValue);
    };

    watch(() => props.modelValue, newValue => {
      value.value = newValue;
    }, {
      immediate: true
    });
    var radioProvider = {
      sync,
      validate,
      resetValidation,
      reset
    };
    bindRadioGroup == null ? void 0 : bindRadioGroup(radioProvider);
    bindForm == null ? void 0 : bindForm(radioProvider);
    return {
      withAnimation,
      checked,
      errorMessage,
      radioGroupErrorMessage: radioGroup == null ? void 0 : radioGroup.errorMessage,
      formDisabled: form == null ? void 0 : form.disabled,
      formReadonly: form == null ? void 0 : form.readonly,
      handleClick,
      toggle,
      reset,
      validate,
      resetValidation
    };
  }

});