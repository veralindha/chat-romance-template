import { computed, defineComponent, ref, watch } from 'vue';
import { props } from './props';
import { useSteps } from './provide';
import VarIcon from '../icon';
import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, toDisplayString as _toDisplayString, createElementBlock as _createElementBlock, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, createElementVNode as _createElementVNode, renderSlot as _renderSlot, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-step"
};
var _hoisted_2 = {
  key: 3
};
export function render(_ctx, _cache) {
  var _component_var_icon = _resolveComponent("var-icon");

  return _openBlock(), _createElementBlock("div", _hoisted_1, [_createElementVNode("div", {
    class: _normalizeClass("var-step-" + _ctx.direction)
  }, [_createElementVNode("div", {
    class: _normalizeClass("var-step-" + _ctx.direction + "__main"),
    ref: _ctx.getRef
  }, [_createElementVNode("div", {
    class: _normalizeClass({
      ["var-step-" + _ctx.direction + "__tag"]: true,
      ["var-step-" + _ctx.direction + "__tag--active"]: _ctx.isActive || _ctx.isCurrent
    }),
    style: _normalizeStyle({
      backgroundColor: _ctx.isActive || _ctx.isCurrent ? _ctx.activeColor : _ctx.inactiveColor
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.click && _ctx.click(...args))
  }, [_ctx.isActive ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 0,
    class: "var-step__icon",
    "var-step-cover": "",
    name: _ctx.activeIcon
  }, null, 8
  /* PROPS */
  , ["name"])) : _ctx.isCurrent && _ctx.currentIcon ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 1,
    class: "var-step__icon",
    "var-step-cover": "",
    name: _ctx.currentIcon
  }, null, 8
  /* PROPS */
  , ["name"])) : _ctx.inactiveIcon ? (_openBlock(), _createBlock(_component_var_icon, {
    key: 2,
    class: "var-step__icon",
    "var-step-cover": "",
    name: _ctx.inactiveIcon
  }, null, 8
  /* PROPS */
  , ["name"])) : (_openBlock(), _createElementBlock("span", _hoisted_2, _toDisplayString(_ctx.index + 1), 1
  /* TEXT */
  ))], 6
  /* CLASS, STYLE */
  ), _createElementVNode("div", {
    class: _normalizeClass({
      ["var-step-" + _ctx.direction + "__content"]: true,
      ["var-step-" + _ctx.direction + "__content--active"]: _ctx.isActive || _ctx.isCurrent
    }),
    onClick: _cache[1] || (_cache[1] = (...args) => _ctx.click && _ctx.click(...args))
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 2
  /* CLASS */
  ), !_ctx.isLastChild ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: _normalizeClass("var-step-" + _ctx.direction + "__line"),
    style: _normalizeStyle({
      margin: _ctx.lineMargin
    })
  }, null, 6
  /* CLASS, STYLE */
  )) : _createCommentVNode("v-if", true)], 2
  /* CLASS */
  )]);
}
export default defineComponent({
  render,
  name: 'VarStep',
  components: {
    VarIcon
  },
  props,

  setup() {
    var main = ref(null);
    var lineMargin = ref('');
    var isLastChild = ref(false);
    var {
      index,
      steps,
      bindSteps
    } = useSteps();
    var {
      active,
      length,
      activeColor,
      inactiveColor,
      direction,
      clickStep
    } = steps;
    var isCurrent = computed(() => active.value === index.value);
    var isActive = computed(() => index.value !== -1 && active.value > index.value);
    var stepProvider = {
      index
    };

    var click = () => clickStep(index.value);

    var getRef = el => {
      if (direction.value === 'horizontal') {
        main.value = el;
      }
    };

    bindSteps(stepProvider);
    watch(length, newLength => {
      isLastChild.value = newLength - 1 === index.value;

      if (main.value) {
        var margin = main.value.offsetWidth / 2 - 14;
        lineMargin.value = "0 -" + margin + "px";
      }
    });
    return {
      main,
      index,
      isActive,
      isCurrent,
      direction,
      lineMargin,
      activeColor,
      inactiveColor,
      isLastChild,
      click,
      getRef
    };
  }

});