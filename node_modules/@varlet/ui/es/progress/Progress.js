import { defineComponent, computed } from 'vue';
import { props } from './props';
import { toNumber } from '../utils/shared';
import { normalizeStyle as _normalizeStyle, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, mergeProps as _mergeProps, renderSlot as _renderSlot, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = {
  class: "var-progress"
};
var _hoisted_2 = {
  key: 0,
  class: "var-progress-linear"
};
var _hoisted_3 = ["viewBox"];
var _hoisted_4 = ["cx", "cy", "r", "stroke-width"];
var _hoisted_5 = ["cx", "cy", "r", "stroke-width"];
export function render(_ctx, _cache) {
  return _openBlock(), _createElementBlock("div", _hoisted_1, [_ctx.mode === 'linear' ? (_openBlock(), _createElementBlock("div", _hoisted_2, [_createElementVNode("div", _mergeProps({
    class: "var-progress-linear__block",
    style: {
      height: _ctx.lineWidth + "px"
    }
  }, _ctx.$attrs), [_ctx.track ? (_openBlock(), _createElementBlock("div", {
    key: 0,
    class: "var-progress-linear__background",
    style: _normalizeStyle({
      background: _ctx.trackColor
    })
  }, null, 4
  /* STYLE */
  )) : _createCommentVNode("v-if", true), _createElementVNode("div", {
    class: _normalizeClass("var-progress-linear__certain" + (_ctx.ripple ? ' var-progress-linear__ripple' : '')),
    style: _normalizeStyle({
      background: _ctx.color,
      width: _ctx.linearProps.width
    })
  }, null, 6
  /* CLASS, STYLE */
  )], 16
  /* FULL_PROPS */
  ), _ctx.label ? (_openBlock(), _createElementBlock("div", _mergeProps({
    key: 0,
    class: "var-progress-linear__label"
  }, _ctx.$attrs), [_renderSlot(_ctx.$slots, "default", {}, () => [_createTextVNode(_toDisplayString(_ctx.linearProps.roundValue), 1
  /* TEXT */
  )])], 16
  /* FULL_PROPS */
  )) : _createCommentVNode("v-if", true)])) : _createCommentVNode("v-if", true), _ctx.mode === 'circle' ? (_openBlock(), _createElementBlock("div", {
    key: 1,
    class: "var-progress-circle",
    style: _normalizeStyle({
      width: _ctx.size + "px",
      height: _ctx.size + "px"
    })
  }, [(_openBlock(), _createElementBlock("svg", {
    class: "var-progress-circle__svg",
    style: _normalizeStyle({
      transform: "rotate(" + (_ctx.rotate - 90) + "deg)"
    }),
    viewBox: _ctx.circleProps.viewBox
  }, [_ctx.track ? (_openBlock(), _createElementBlock("circle", {
    key: 0,
    class: "var-progress-circle__background",
    cx: _ctx.size / 2,
    cy: _ctx.size / 2,
    r: _ctx.circleProps.radius,
    fill: "transparent",
    "stroke-width": _ctx.lineWidth,
    style: _normalizeStyle({
      strokeDasharray: _ctx.circleProps.perimeter,
      stroke: _ctx.trackColor
    })
  }, null, 12
  /* STYLE, PROPS */
  , _hoisted_4)) : _createCommentVNode("v-if", true), _createElementVNode("circle", {
    class: "var-progress-circle__certain",
    cx: _ctx.size / 2,
    cy: _ctx.size / 2,
    r: _ctx.circleProps.radius,
    fill: "transparent",
    "stroke-width": _ctx.lineWidth,
    style: _normalizeStyle({
      strokeDasharray: _ctx.circleProps.strokeDasharray,
      stroke: _ctx.color
    })
  }, null, 12
  /* STYLE, PROPS */
  , _hoisted_5)], 12
  /* STYLE, PROPS */
  , _hoisted_3)), _ctx.label ? (_openBlock(), _createElementBlock("div", _mergeProps({
    key: 0,
    class: "var-progress-circle__label"
  }, _ctx.$attrs), [_renderSlot(_ctx.$slots, "default", {}, () => [_createTextVNode(_toDisplayString(_ctx.circleProps.roundValue), 1
  /* TEXT */
  )])], 16
  /* FULL_PROPS */
  )) : _createCommentVNode("v-if", true)], 4
  /* STYLE */
  )) : _createCommentVNode("v-if", true)]);
}
export default defineComponent({
  render,
  name: 'VarProgress',
  inheritAttrs: false,
  props,

  setup(props) {
    var linearProps = computed(() => {
      var value = toNumber(props.value);
      var width = value > 100 ? 100 : value;
      var roundValue = value > 100 ? 100 : Math.round(value);
      return {
        width: width + "%",
        roundValue: roundValue + "%"
      };
    });
    var circleProps = computed(() => {
      var {
        size,
        lineWidth,
        value
      } = props;
      var viewBox = "0 0 " + size + " " + size;
      var roundValue = toNumber(value) > 100 ? 100 : Math.round(toNumber(value));
      var radius = (size - toNumber(lineWidth)) / 2;
      var perimeter = 2 * Math.PI * radius;
      var strokeDasharray = roundValue / 100 * perimeter + ", " + perimeter;
      return {
        viewBox,
        radius,
        strokeDasharray,
        perimeter,
        roundValue: roundValue + "%"
      };
    });
    return {
      linearProps,
      circleProps
    };
  }

});