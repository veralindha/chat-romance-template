import Ripple from '../ripple';
import VarLoading from '../loading';
import { defineComponent } from 'vue';
import { props } from './props';
import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, renderSlot as _renderSlot, normalizeClass as _normalizeClass, createElementVNode as _createElementVNode, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from "vue";

var _withScopeId = n => (_pushScopeId(""), n = n(), _popScopeId(), n);

var _hoisted_1 = ["disabled"];
export function render(_ctx, _cache) {
  var _component_var_loading = _resolveComponent("var-loading");

  var _directive_ripple = _resolveDirective("ripple");

  return _withDirectives((_openBlock(), _createElementBlock("button", {
    class: _normalizeClass(["var-button var--box", ["var-button--" + _ctx.size, _ctx.block ? 'var--flex var-button--block' : 'var--inline-flex', _ctx.disabled ? 'var-button--disabled' : null, _ctx.text ? "var-button--text-" + _ctx.type : "var-button--" + _ctx.type, _ctx.text ? 'var-button--text' : 'var-elevation--2', _ctx.text && _ctx.disabled ? 'var-button--text-disabled' : null, _ctx.round ? 'var-button--round' : null, _ctx.outline ? 'var-button--outline' : null]]),
    style: _normalizeStyle({
      color: _ctx.textColor,
      background: _ctx.color
    }),
    disabled: _ctx.disabled,
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args)),
    onTouchstart: _cache[1] || (_cache[1] = (...args) => _ctx.handleTouchstart && _ctx.handleTouchstart(...args))
  }, [_ctx.loading ? (_openBlock(), _createBlock(_component_var_loading, {
    key: 0,
    class: "var-button__loading",
    type: _ctx.loadingType,
    size: _ctx.loadingSize,
    radius: _ctx.loadingRadius
  }, null, 8
  /* PROPS */
  , ["type", "size", "radius"])) : _createCommentVNode("v-if", true), _createElementVNode("div", {
    class: _normalizeClass(["var-button__content", [_ctx.loading ? 'var-button--hidden' : null]])
  }, [_renderSlot(_ctx.$slots, "default")], 2
  /* CLASS */
  )], 46
  /* CLASS, STYLE, PROPS, HYDRATE_EVENTS */
  , _hoisted_1)), [[_directive_ripple, {
    disabled: _ctx.disabled || !_ctx.ripple
  }]]);
}
export default defineComponent({
  render,
  name: 'VarButton',
  components: {
    VarLoading
  },
  directives: {
    Ripple
  },
  props,

  setup(props) {
    var handleClick = e => {
      var {
        loading,
        disabled,
        onClick
      } = props;

      if (loading || disabled) {
        return;
      }

      onClick == null ? void 0 : onClick(e);
    };

    var handleTouchstart = e => {
      var {
        loading,
        disabled,
        onTouchstart
      } = props;

      if (loading || disabled) {
        return;
      }

      onTouchstart == null ? void 0 : onTouchstart(e);
    };

    return {
      handleClick,
      handleTouchstart
    };
  }

});