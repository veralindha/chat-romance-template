import Ripple from '../ripple';
import { defineComponent, ref, computed, watch } from 'vue';
import { props } from './props';
import { useTabs } from './provide';
import { renderSlot as _renderSlot, normalizeClass as _normalizeClass, normalizeStyle as _normalizeStyle, resolveDirective as _resolveDirective, withDirectives as _withDirectives, openBlock as _openBlock, createElementBlock as _createElementBlock } from "vue";
export function render(_ctx, _cache) {
  var _directive_ripple = _resolveDirective("ripple");

  return _withDirectives((_openBlock(), _createElementBlock("div", {
    class: _normalizeClass(["var-tab var--box", [_ctx.computeColorClass(), "var-tab--" + _ctx.itemDirection]]),
    ref: "tabEl",
    style: _normalizeStyle({
      color: _ctx.computeColorStyle()
    }),
    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.handleClick && _ctx.handleClick(...args))
  }, [_renderSlot(_ctx.$slots, "default")], 6
  /* CLASS, STYLE */
  )), [[_directive_ripple, {
    disabled: _ctx.disabled
  }]]);
}
export default defineComponent({
  render,
  name: 'VarTab',
  directives: {
    Ripple
  },
  props,

  setup(props) {
    var tabEl = ref(null);
    var name = computed(() => props.name);
    var disabled = computed(() => props.disabled);
    var element = computed(() => tabEl.value);
    var {
      index,
      tabs,
      bindTabs
    } = useTabs();
    var {
      onTabClick,
      active,
      activeColor,
      inactiveColor,
      disabledColor,
      itemDirection,
      resize
    } = tabs;
    var tabProvider = {
      name,
      index,
      disabled,
      element
    };
    bindTabs(tabProvider);

    var computeColorStyle = () => {
      var {
        disabled,
        name
      } = props;
      return disabled ? disabledColor.value : active.value === name || active.value === (index == null ? void 0 : index.value) ? activeColor.value : inactiveColor.value;
    };

    var computeColorClass = () => {
      var {
        disabled,
        name
      } = props;
      return disabled ? 'var-tab--disabled' : active.value === name || active.value === (index == null ? void 0 : index.value) ? 'var-tab--active' : 'var-tab--inactive';
    };

    var handleClick = event => {
      var {
        disabled,
        name,
        onClick
      } = props;

      if (disabled) {
        return;
      }

      onClick == null ? void 0 : onClick(name != null ? name : index.value, event);
      onTabClick(tabProvider);
    };

    watch(() => props.name, resize);
    watch(() => props.disabled, resize);
    return {
      tabEl,
      active,
      activeColor,
      inactiveColor,
      itemDirection,
      computeColorStyle,
      computeColorClass,
      handleClick
    };
  }

});